Scripting languages support several types of conditional expressions. These expressions enable a script to perform one of several
actions contingent upon some condition-typically the value of a variable.

                  if-then

One common command that uses conditional expressions is the if-then statement. fi to designate the end of the statement.
##################################
  if [condition]
  then
    [command]
  fi
##################################

                if-then-else
                
You can also add an else section to your if-then statement   
##################################
  if [condition]
  then
    [command]
  else
    [command]
  fi
##################################  
  
                test command
                
This basic if-then-else statement syntax has limited use. Where it really becomes valuable is when you can test a variable's value.
The test command:
  test [condition]
If the condition (condition) listed in the test command evaluates to true, the test command exits with a zero status code. If the
condition evaluates to false, the test command exits with a nonzero status code.
  test == if-then-else
Both the test condition and test command can evaluate three condition types:
  1: Numeric comparisons
  2: String comparisons and tests
  3: File comparisons and tests
  
To test if two numbers are equal, the number comparison users the -eq comparison syntax. To test if two strings are equivalent,
the string comparison use the = comparison syntax.
For varibales that will be used to store integers, you should use the declare command as follows: declare -i [variable]
You can also test a variable's contents without a comparison. 
  For example: 
To test if a string has a length of zero, use the -z syntax. 
To test if a file exits, use the -f syntax.
  
The [ condition ] must have a space after the first bracket [ and before the closing brecket ].
Test conditions may be combined with the logical "and" (&&) or logical "or" (||) operatiors. 
When conditionals are combined with &&, both sides of the operator must be true for the conditon as a whole to be true. 
When || is used, if either side of the operator is true, the condition as a while is true.

                nested if

If a variable can have two or more values, you can use nested if statements to test for these conditions.
Instead of an else keyword, the elif (else if) keyword is used.
##################################
  if [ condition1 ]
  then
    [command]
  elif [ condtion2 ]
    [command]
  fi
##################################

                case
                
For a case statement, [word] is likely to be a variable and each instance of pattern is a possible value of that variable. The patterns
can be expanded much like filenames, using the same wildcards and expansion rules (* to stand for any string). You can match an arbitrary
number of patterns in this way. Each set of commands must end with a double semicolon (;;), and the case statement as a whole ends in 
the string esac (case backwards).
Upon execution, bash executes the commands associated with the first pattern to match the variable's contents. Execution then jumps to 
the line following the esac statement; any intervening commands don't execute. If no patterns match the word, no code within the case 
statement executes.
##################################
  case [word] in
    pattern1)
      [command];;
    pattern2)
      [command];;
    ....
  esac
##################################  




                      Loops
              
Conditional expressions are sometimes used in loops. Loops are structures that tell the script to perform the same task repeatedly
until some condition is met (or until some condition is no longer met).
There are three primary loop types that you can use in a shell script. Two of the loop types are based on a test condition, while the
other loop type executes its task(s) for a certain number of list items.
  - While condition tests true
  - Until condition tests true
  - For items in list
  
            While Loop

The while loop's commmands execute while its test condition returns a true.
You can use double brackets to enclose a test condition [[ condition ]] that might test an empty variable.  
##################################
  while [ condition ]
  do
    [commands]
  done
##################################

          Until Loop
          
An until loop takes a slightly different approach. An until loop's command execute until its test conditon return a true.
##################################
  until [ condition ]
  do
    [commands]
  done
##################################

          For Loop
          
A for loop is rather different in its operation compared to while and until loops. The for loop does not test any conditions, but 
instead executes its commands for a certain number of list items. When the for loop starts, variable (variable) is assigned the 
first item in the list's (list) value. The commands in the do/done construct are executed on time. The variable is then assigned the
second list item's value, and the commands in the do/done construct are executed one time again. This continues until each list item's 
value has been assigned to the variable.
##################################
  for variable in list
  do
    commands
  done
##################################  



          Shift command
          
The shift command removes the value of the $1 parameter, moves the $2 parameter's value into $1, moves the $3 parameter's value into $2,
and so on. When shift has passed the last parameter, the $1 variable becomes null.
Shift move over the value of each parameter after a run of the command.

./adduser voth adam john bob

##################################
!#/bin/bash
Username=$1
until [ "Username" = "" ]
do
......
  shift
  Username=$1
done
##################################
          
          seq command
          
The seq command is another handy command to use with the for loop. It's great if youneed a large amount of numbers in your list.
  seq [BeginningNumber] [IncrementAmount] [EndingNumber]
  seq 10 does 1-10 with increment of 1
  seq 2 10 does 2-10 with increment of 1
  seq 2 2 10 does 2-10 with increment of 2 (2,4,6,8,10)

          list
          
You can chain together commands using various list operators. This is called a list or a list of commands. 
You can use the following operator.
  Semicolon ;
  Ampersand &
  Double ampersand &&
  Double vertical line or pipe ||
  
The semicolon (;) operator allows you to list two or more commands on the same command line.
You can have your commands run almost simultaneously by using the ampersand (&) operator. Any command with an ampersand listed after
it is sent to the background to execute. Commands without ampersands are run in the foreground.
With the double ampersand (&&), the second command is executed only if the first command completes successfully.
With the double pipe (||) operator, the second command will be executed only if the first command does not execute successfully.
You can add the break command after a (||) pipe command to terminate the list.

          function
          
A function is a part of a sscript that performs a specific subtask and can be called by name from other parts of the script. Functions
are defined by placing a set of parentheses () after the function name and enclosing the lines that makes up the function within curly
braces {}:
Functions aren't run directly and in the order in which they appear in the script. 
They're run only when called in the main body of the script
#################################
  function_name() {
    commands
    }
#################################

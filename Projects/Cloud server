#### How to Install LEMP Stack (Nginx, MariaDB, PHP7.2) on Ubuntu 18.04 LTS ####

#### Step 1: Update Software Packages ####
# Before we install the LEMP stack, it’s a good practice to update repository and software packages by running the following 
# commands on your Ubuntu 18.04 OS.
    sudo apt update
    sudo apt upgrade
  
  
  
#### Step 2: Install Nginx Web Server ####
# Nginx is a high performance web server and very popular these days. It also can be used as a reverse proxy and caching server. 
# Enter this command to install Nginx Web server.
    sudo apt install nginx
# After it’s installed, we can enable Nginx to auto start when Ubuntu is booted by running the following command.
    sudo systemctl enable nginx
# Then start Nginx with this command:
    sudo systemctl start nginx
# Now check out its status.
    systemctl status nginx
  
# Now type in the public IP address of your Ubuntu 18.04 server in the browser address bar. 
# You should see the “Welcome to Nginx” Web page, which means Nginx Web server is running properly. 
# If you are installing LEMP on your local Ubuntu 18.04 computer, then type 127.0.0.1 or localhost in the browser address bar.
# Note that some cloud server providers may block all incoming traffic by default, so if your browser can’t connect to Nginx web server, 
# you may need to set firewall rules in your control panel.

# Finally, we need to make www-data (Nginx user) as the owner of web directory. By default it’s owned by the root user.
    sudo chown www-data:www-data /usr/share/nginx/html -R
  
  
  
#### Step 3: Install MariaDB Database Server ####
# MariaDB is a drop-in replacement for MySQL. 
# It is developed by former members of MySQL team who are concerned that Oracle might turn MySQL into a closed-source product. 
# Enter the following command to install MariaDB on Ubuntu 18.04.
    sudo apt install mariadb-server mariadb-client
# After it’s installed, MariaDB server should be automatically stared. 
# Use systemctl to check its status.
    systemctl status mariadb
# If it’s not running, start it with this command:
    sudo systemctl start mariadb
# To enable MariaDB to automatically start at boot time, run
    sudo systemctl enable mariadb
# Now run the post installation security script.
    sudo mysql_secure_installation
# When it asks you to enter MariaDB root password, press Enter key as the root password isn’t set yet. 
# Then enter y to set the root password for MariaDB server.
# Next, you can press Enter to answer all remaining questions, which will remove anonymous user, 
# disable remote root login and remove test database. This step is a basic requirement for MariaDB database security. 
# (Notice that Y is capitalized, which means it is the default answer. )

# By default, the MaraiDB package on Ubuntu uses unix_socket to authenticate user login, 
# which basically means you can use username and password of the OS to log into MariaDB console. 
# So you can run the following command to login without providing MariaDB root password.
    sudo mariadb -u root
# To exit, run
    exit;
    
    

#### Step 4: Install PHP7.2 ####
# PHP7.2 is included in Ubuntu 18.04 repository and has a minor performance imrovement over PHP7.1. 
# Enter the following command to install php7.2 and some common extensions.
    sudo apt install php7.2 php7.2-fpm php7.2-mysql php-common php7.2-cli php7.2-common php7.2-json php7.2-opcache php7.2-readline \
    php7.2-mbstring php7.2-xml php7.2-gd php7.2-curl

# Installing these PHP extensions ensures that your CMS runs smoothly. Now start php7.2-fpm.
    sudo systemctl start php7.2-fpm
# Enable auto-start at boot time.
    sudo systemctl enable php7.2-fpm
# Check status:
    systemctl status php7.2-fpm
    
    
    
#### Step 5: Create a Nginx Server Block ####
# A Nginx server block is like a virtual host in Apache. We will not use the default server block because it’s inadequate 
# to run PHP code and if we modify it, it becomes a mess. So remove the default symlink in sites-enabled directory 
# by running the following command. (It’s still available as /etc/nginx/sites-available/default.)
    sudo rm /etc/nginx/sites-enabled/default
# Then create a brand new server block file under /etc/nginx/conf.d/ directory.
    sudo nano /etc/nginx/conf.d/default.conf

# Paste the following text into the file. The following snippet will make Nginx listen on 
# IPv4 port 80 and IPv6 port 80 with a catch-allserver name.

######### Start ##########
server {
  listen 80;
  listen [::]:80;
  server_name _;
  root /usr/share/nginx/html/;
  index index.php index.html index.htm index.nginx-debian.html;

  location / {
    try_files $uri $uri/ /index.php;
  }

  location ~ \.php$ {
    fastcgi_pass unix:/run/php/php7.2-fpm.sock;
    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    include fastcgi_params;
    include snippets/fastcgi-php.conf;
  }

  location ~ /\.ht {
    deny all;
  }
}
########### End ##########

# Save and close the file. Then test Nginx configurations.
    sudo nginx -t
# If the test is successful, reload Nginx.
    sudo systemctl reload nginx
    


#### Step 6: Test PHP ####
# To test PHP-FPM with Nginx Web server, we need to create a info.php file in the document root directory.
    sudo nano /usr/share/nginx/html/info.php

# Paste the following PHP code into the file.
    <?php phpinfo(); ?>

# Save and close the file. Now in the browser address bar, enter server-ip-address/info.php. 
# Replace sever-ip-address with your actual IP. If you follow this tutorial on your local computer, 
# then type 127.0.0.1/info.php or localhost/info.php.
# You should see your server’s PHP information. This means PHP scripts can run properly with Nginx web server.

# Congrats! You have successfully installed Nginx, MariaDB and PHP7.2 on Ubuntu 18.04. 
# For your server’s security, you should delete info.php file now to prevent hacker seeing it.


# Head to NoIP.com to set up a domain name which we will use for your nextcloud url/domain name


#### How to Install NextCloud on Ubuntu 18.04 with Nginx (LEMP Stack) ####
# This tutorial will be showing you how to install NextCloud on Ubuntu 18.04 LTS with Nginx. 
# As you may probably know, NextCloud is a free open-source self-hosted cloud storage solution that is forked from ownCloud. 



#### Step 1: Download NextCloud 13 on Ubuntu 18.04 ####
# Login into your Ubuntu 18.04 server. Then download the NextCloud zip archive onto your server. 
# The latest stable version is 13.0.2 at time of this writing. You may need to change the version number. 
# Go to https://nextcloud.com/install and click the download button to see the latest version.

# You can run the following command to download it on your server.
    wget https://download.nextcloud.com/server/releases/nextcloud-13.0.2.zip
# Once downloaded, extract the archive with unzip.
# If your system is missing unzip program install with apt-get
    sudo apt-get install unzip
    sudo apt install unzip
    sudo unzip nextcloud-13.0.2.zip -d /usr/share/nginx/
# The -d option specifies the target directory. NextCloud web files will be extracted to /usr/share/nginx/nextcloud/.  
# Then we need to change the owner of this directory to www-data so that the web server (Nginx) can write to this directory.
    sudo chown www-data:www-data /usr/share/nginx/nextcloud/ -R
     
     
    
#### Step 2: Create a Database and User in MariaDB ####    
# Log into MariaDB database server with the following command. 
# Since MariaDB is now using unix_socket plugin to authentication user login, there’s no need to enter MariaDB root password.
# We just need to prefix the mysql command with sudo.
        sudo mysql
# Alternatively, you can also use this command to login.
        sudo mariadb
# Then create a database for Nextcloud. This tutorial name the database nextcloud. You can use whatever name you like.
        create database nextcloud;
# Create the database user. Again, you can use your preferred name for this user. Replace your-password with your preferred password.
        create user nextclouduser@localhost identified by 'your-password';
# Grant this user all privileges on the nextcloud database.
        grant all privileges on nextcloud.* to nextclouduser@localhost identified by 'your-password';
# Flush privileges and exit.
        flush privileges;
        exit;
        
#### Step 3: Create a Nginx Config File for Nextcloud ####
# Create a nextcloud.conf file in /etc/nginx/conf.d/ directory.
        sudo nano /etc/nginx/conf.d/nextcloud.conf
# Put the following text into the file. Replace the red-colored text with your actual data. 
# Don’t forget to set A record for the domain name.

######### Start ##########
server {
    listen 80;
    server_name [nextcloud.your-domain.com];

    # Add headers to serve security related headers
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Robots-Tag none;
    add_header X-Download-Options noopen;
    add_header X-Permitted-Cross-Domain-Policies none;

    #This header is already set in PHP, so it is commented out here.
    #add_header X-Frame-Options "SAMEORIGIN";

    # Path to the root of your installation
    root /usr/share/nginx/nextcloud/;

    location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
    }

    # The following 2 rules are only needed for the user_webfinger app.
    # Uncomment it if you're planning to use this app.
    #rewrite ^/.well-known/host-meta /public.php?service=host-meta last;
    #rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json
    # last;

    location = /.well-known/carddav {
        return 301 $scheme://$host/remote.php/dav;
    }
    location = /.well-known/caldav {
       return 301 $scheme://$host/remote.php/dav;
    }

    location ~ /.well-known/acme-challenge {
      allow all;
    }

    # set max upload size
    client_max_body_size 512M;
    fastcgi_buffers 64 4K;

    # Disable gzip to avoid the removal of the ETag header
    gzip off;

    # Uncomment if your server is build with the ngx_pagespeed module
    # This module is currently not supported.
    #pagespeed off;

    error_page 403 /core/templates/403.php;
    error_page 404 /core/templates/404.php;

    location / {
       rewrite ^ /index.php$uri;
    }

    location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ {
       deny all;
    }
    location ~ ^/(?:\.|autotest|occ|issue|indie|db_|console) {
       deny all;
     }

    location ~ ^/(?:index|remote|public|cron|core/ajax/update|status|ocs/v[12]|updater/.+|ocs-provider/.+|core/templates/40[34])\.php(?:$|/) {
       include fastcgi_params;
       fastcgi_split_path_info ^(.+\.php)(/.*)$;
       fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
       fastcgi_param PATH_INFO $fastcgi_path_info;
       #Avoid sending the security headers twice
       fastcgi_param modHeadersAvailable true;
       fastcgi_param front_controller_active true;
       fastcgi_pass unix:/run/php/php7.2-fpm.sock;
       fastcgi_intercept_errors on;
       fastcgi_request_buffering off;
    }

    location ~ ^/(?:updater|ocs-provider)(?:$|/) {
       try_files $uri/ =404;
       index index.php;
    }

    # Adding the cache control header for js and css files
    # Make sure it is BELOW the PHP block
    location ~* \.(?:css|js)$ {
        try_files $uri /index.php$uri$is_args$args;
        add_header Cache-Control "public, max-age=7200";
        # Add headers to serve security related headers (It is intended to
        # have those duplicated to the ones above)
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header X-Robots-Tag none;
        add_header X-Download-Options noopen;
        add_header X-Permitted-Cross-Domain-Policies none;
        # Optional: Don't log access to assets
        access_log off;
   }

   location ~* \.(?:svg|gif|png|html|ttf|woff|ico|jpg|jpeg)$ {
        try_files $uri /index.php$uri$is_args$args;
        # Optional: Don't log access to other assets
        access_log off;
   }
}
############ End #####################

# Save and close the file. Test Nginx configuration, then reload Nginx for the changes to take effect.
        sudo nginx -t
        sudo systemctl reload nginx
        
        
        
#### Step 4: Install and Enable PHP Modules ####
# Run the following commands to install PHP modules required or recommended by NextCloud.
        sudo apt install php-imagick php7.2-common php7.2-gd php7.2-json php7.2-curl  php7.2-zip php7.2-xml php7.2-mbstring \
        php7.2-bz2 php7.2-intl
        
        
        
#### Step 5: Enable HTTPS ####
# Now you can access the Nextcloud web install wizard in your browser by entering the domain name for your Nextcloud installation.
[nextcloud.your-domain.com]

# If the web page can’t load, you probably need to open port 80 in firewall.
        sudo iptables -I INPUT -p tcp --dport 80 -j ACCEPT
        sudo ufw allow 80
# And port 443 as well.
        sudo iptables -I INPUT -p tcp --dport 443 -j ACCEPT
        sudo ufw allow 443
        
# Before entering any sensitive information, we should enable secure HTTPS connection on Nextcloud. 
# We can obtain a free TLS certificate from Let’s Encrypt. Install Let’s Encrypt client (certbot) from Ubuntu 18.04 repository.
        sudo apt install certbot python3-certbot-nginx
# Python-certbot-nginx is the Nginx plugin. Next, run the following command to obtain a free TLS certificate using the Nginx plugin.
        sudo certbot --nginx --agree-tos --redirect --hsts --staple-ocsp --email [your-email-address] -d [nextcloud.your-domain.com]
        
# The Nginx plugin is not smart enough to handle such complex configuration file. 
# It failed to redirect HTTP to HTTPS and the HSTS header wasn’t added. We can open the configuration file and enabled these two feature manually.
        sudo nano /etc/nginx/conf.d/nextcloud.conf
# To redirect HTTP to HTTPS, your Nginx configuration file needs to include a 301 redirect like below.

############# Start ############
server {
    listen 80;
    server_name [nextcloud.linuxbabe.com];
    return 301 [https://nextcloud.linuxbabe.com]$request_uri;
}

server {
    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/nextcloud.linuxbabe.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/nextcloud.linuxbabe.com/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

    ......  
    ......
    remaining configurations
    ......
}        
########### End ###########        
        
# We can then add the following line in the ssl server block to enable HSTS header.
        add_header Strict-Transport-Security "max-age=31536000" always;
# Also, you can enable HTTP2 protocol by adding the option http2.
        listen 443 ssl http2; # managed by Certbot        
  
# Save and close the file. Then text Nginx configurations.
        sudo nginx -t
# If the test is successful, reload Nginx for the change to take effect.
        sudo systemctl reload nginx
  
# The data folder is where users’ files are stored. For security, it’s best to place the data directory outside of Nextcloud web root.
# So instead of storing users’ files under /usr/share/nginx/nextcloud/data/, we can change it to /usr/share/nginx/nextcloud-data. 
# which can be created with the following command:
        sudo mkdir /usr/share/nginx/nextcloud-data
        
# Then make sure Nginx user (www-data) has write permission to the data directory.
        sudo chown www-data:www-data /usr/share/nginx/nextcloud-data -R
        

        

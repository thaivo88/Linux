#### How to Install LEMP Stack (Nginx, MariaDB, PHP7.2) on Ubuntu 18.04 LTS ####

#### Step 1: Update Software Packages ####
# Before we install the LEMP stack, it’s a good practice to update repository and software packages by running the following 
# commands on your Ubuntu 18.04 OS.
    sudo apt update
    sudo apt upgrade
  
  
  
#### Step 2: Install Nginx Web Server ####
# Nginx is a high performance web server and very popular these days. It also can be used as a reverse proxy and caching server. 
# Enter this command to install Nginx Web server.
    sudo apt install nginx
# After it’s installed, we can enable Nginx to auto start when Ubuntu is booted by running the following command.
    sudo systemctl enable nginx
# Then start Nginx with this command:
    sudo systemctl start nginx
# Now check out its status.
    systemctl status nginx
  
# Now type in the public IP address of your Ubuntu 18.04 server in the browser address bar. 
# You should see the “Welcome to Nginx” Web page, which means Nginx Web server is running properly. 
# If you are installing LEMP on your local Ubuntu 18.04 computer, then type 127.0.0.1 or localhost in the browser address bar.
# Note that some cloud server providers may block all incoming traffic by default, so if your browser can’t connect to Nginx web server, 
# you may need to set firewall rules in your control panel.

# Finally, we need to make www-data (Nginx user) as the owner of web directory. By default it’s owned by the root user.
    sudo chown www-data:www-data /usr/share/nginx/html -R
  
  
  
#### Step 3: Install MariaDB Database Server ####
# MariaDB is a drop-in replacement for MySQL. 
# It is developed by former members of MySQL team who are concerned that Oracle might turn MySQL into a closed-source product. 
# Enter the following command to install MariaDB on Ubuntu 18.04.
    sudo apt install mariadb-server mariadb-client
# After it’s installed, MariaDB server should be automatically stared. 
# Use systemctl to check its status.
    systemctl status mariadb
# If it’s not running, start it with this command:
    sudo systemctl start mariadb
# To enable MariaDB to automatically start at boot time, run
    sudo systemctl enable mariadb
# Now run the post installation security script.
    sudo mysql_secure_installation
# When it asks you to enter MariaDB root password, press Enter key as the root password isn’t set yet. 
# Then enter y to set the root password for MariaDB server.
# Next, you can press Enter to answer all remaining questions, which will remove anonymous user, 
# disable remote root login and remove test database. This step is a basic requirement for MariaDB database security. 
# (Notice that Y is capitalized, which means it is the default answer. )

# By default, the MaraiDB package on Ubuntu uses unix_socket to authenticate user login, 
# which basically means you can use username and password of the OS to log into MariaDB console. 
# So you can run the following command to login without providing MariaDB root password.
    sudo mariadb -u root
# To exit, run
    exit;
    
    

#### Step 4: Install PHP7.2 ####
# PHP7.2 is included in Ubuntu 18.04 repository and has a minor performance imrovement over PHP7.1. 
# Enter the following command to install php7.2 and some common extensions.
    sudo apt install php7.2 php7.2-fpm php7.2-mysql php-common php7.2-cli php7.2-common php7.2-json php7.2-opcache php7.2-readline \
    php7.2-mbstring php7.2-xml php7.2-gd php7.2-curl

# Installing these PHP extensions ensures that your CMS runs smoothly. Now start php7.2-fpm.
    sudo systemctl start php7.2-fpm
# Enable auto-start at boot time.
    sudo systemctl enable php7.2-fpm
# Check status:
    systemctl status php7.2-fpm
    
    
    
#### Step 5: Create a Nginx Server Block ####
# A Nginx server block is like a virtual host in Apache. We will not use the default server block because it’s inadequate 
# to run PHP code and if we modify it, it becomes a mess. So remove the default symlink in sites-enabled directory 
# by running the following command. (It’s still available as /etc/nginx/sites-available/default.)
    sudo rm /etc/nginx/sites-enabled/default
# Then create a brand new server block file under /etc/nginx/conf.d/ directory.
    sudo nano /etc/nginx/conf.d/default.conf

# Paste the following text into the file. The following snippet will make Nginx listen on 
# IPv4 port 80 and IPv6 port 80 with a catch-allserver name.

######### Start ##########
server {
  listen 80;
  listen [::]:80;
  server_name _;
  root /usr/share/nginx/html/;
  index index.php index.html index.htm index.nginx-debian.html;

  location / {
    try_files $uri $uri/ /index.php;
  }

  location ~ \.php$ {
    fastcgi_pass unix:/run/php/php7.2-fpm.sock;
    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    include fastcgi_params;
    include snippets/fastcgi-php.conf;
  }

  location ~ /\.ht {
    deny all;
  }
}
########### End ##########

# Save and close the file. Then test Nginx configurations.
    sudo nginx -t
# If the test is successful, reload Nginx.
    sudo systemctl reload nginx
    


#### Step 6: Test PHP ####
# To test PHP-FPM with Nginx Web server, we need to create a info.php file in the document root directory.
    sudo nano /usr/share/nginx/html/info.php

# Paste the following PHP code into the file.
    <?php phpinfo(); ?>

# Save and close the file. Now in the browser address bar, enter server-ip-address/info.php. 
# Replace sever-ip-address with your actual IP. If you follow this tutorial on your local computer, 
# then type 127.0.0.1/info.php or localhost/info.php.
# You should see your server’s PHP information. This means PHP scripts can run properly with Nginx web server.

# Congrats! You have successfully installed Nginx, MariaDB and PHP7.2 on Ubuntu 18.04. 
# For your server’s security, you should delete info.php file now to prevent hacker seeing it.





#### How to Install NextCloud on Ubuntu 18.04 with Nginx (LEMP Stack) ####
# This tutorial will be showing you how to install NextCloud on Ubuntu 18.04 LTS with Nginx. 
# As you may probably know, NextCloud is a free open-source self-hosted cloud storage solution that is forked from ownCloud. 



#### Step 1: Download NextCloud 13 on Ubuntu 18.04 ####
# Login into your Ubuntu 18.04 server. Then download the NextCloud zip archive onto your server. 
# The latest stable version is 13.0.2 at time of this writing. You may need to change the version number. 
# Go to https://nextcloud.com/install and click the download button to see the latest version.

# You can run the following command to download it on your server.
    wget https://download.nextcloud.com/server/releases/nextcloud-13.0.2.zip
# Once downloaded, extract the archive with unzip.
# If your system is missing unzip program install with apt-get
    sudo apt-get install unzip
    sudo apt install unzip
    sudo unzip nextcloud-13.0.2.zip -d /usr/share/nginx/
# The -d option specifies the target directory. NextCloud web files will be extracted to /usr/share/nginx/nextcloud/.  
# Then we need to change the owner of this directory to www-data so that the web server (Nginx) can write to this directory.
    sudo chown www-data:www-data /usr/share/nginx/nextcloud/ -R
     
     
    
#### Step 2: Create a Database and User in MariaDB ####    

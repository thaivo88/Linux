Linux maintains log files that record various key details about system operation. These log files are typically stored in the
/var/log directory. The /var directory is part of the File Hierarchy Standard (FHS). It is important to know how to change the
log file configuration. You do this by configuring the syslogd daemon.

If your computer doesn't properly manage existing log files, they can grow to consume all of your available disk space.
The daemon for journaling is systemd-journald



                                                          syslogd

Most Linux systems employ a special daemon to handle log maintenance in a unified way. The traditional Linux daemon log manager 
is syslogd, the syslogd daemon handles messages from servers and other user-mode programs. The klogd daemon manages logging of
kernel messages

The basic idea behind a system logger is to provide a unified means of handling log files. The daemon runs in the background 
and accepts data delivered from servers and other programs that are configured to use the log daemon. The log daemon must
be configured. In the case of syslogd, this is done through the /etc/syslog.conf file. The rsyslogd configuration file is
/etc/rsyslog.conf



        Setting Logging Options

The format of the /etc/syslog.conf file:
  1:  facility
      The facility parameter is the type of program or tool that generated the message to be logged. 
  2:  priority
      The priority is the parameter for the importance of this message. 
  3:  action
      The action is a file, remove computer, or other location that's to accept the message. 
  3:  selector
      The facility and priority are often referred to collectively as the selector.



      Facility parameters:
-----------------------------------------------------      
authpriv          security and authorization messages
cron              cron daemon messages
daemon            various system daemon messages
kern              kernel messages
lpr               printing system messages
mail              mail system messages
news              news daemon messages
syslog            internally generated syslog messages
user              user-level messages
uucp              unix-t0-unix copy program (uucp) daemon messages
local0 - local7   locally defined application messages
----------------------------------------------------- 
For the facility parameter in the /etc/syslog.conf file, an asterisk (*) refers to all facilities. You can specify multiple
facilities in one selector by separating the facility names with commas (,).



    Priority parameters:
-----------------------------------------------------  
debug         debugging level messages for application development  (least importance)
info          normal operation messages
notice        abnormal messages that are not a concern
warning       messages that indicate an error will occur if action is not taken
err           non-urgent failure and error messages
crit          urgent failure and error messages concerning secondary systems
alert         urgent failure and error messages concerning primary systems
emerg         panic messages indicating system is unusable  (most importance)
----------------------------------------------------- 
These priorities represent ascending levels of importance.

When a program sends a message to the system logger, it includes a priority parameter; the logger logs the message to a file if
you've configured it to log messages of that level of higher. Thus, if you specify a priority code of alert, the sytem will log
messages that are classified as alert or emerg but not messages of crit or bleow.

An exception to this rule is if you precede the priority parameter by an equal sign (=), as in =crit, which describes what to do 
with messages of crit priority only. An exclmaion mark (!) reverses the meaning of a match. 
!crit causes messages below crit priority to be logged. A priority of * refers to all priorities.

You can specify multiple selectors for a single action by separating the selectors with a semicolon (;). Commas are used to separate
multiple facilities within a single selector. Semicolons are used to separate multiple selectors as a whole.

Most commonly, the action parameter is a filename, typically in the /var/log directory tree. The messages, syslog, and secure files
in this directory are three common and important log files. Another possible logging location includes a remote machine name 
preceded by an at sign (@) to log data to the specified system. You can also have a username list of individuals who should see the 
message, if they're logged in. For this last option, an asterisk (*) means all logged-in users.

  mail.*  /var/log/mail
This line sends all log entries identified by the origination program as related to mail to the /var/log/mail file.

  *.emerg     *
This line send all emerg-level messages to all users who are logged into the computer using text-mode tools.



      Logging Data
      
You may want to create a log entry manually or have a script do so. The tool for this job is known as logger:
  logger [-isd] [-f file] [-p pri] [-t tag] [-u socket] [message...]

logger option
  Record logger PID:  
The -i option records the process ID (PID) of the logger process along with other data.
  Output to Standard Error:
You can echo data to standard error as well as to the log file by using the -s option. An interactive script might use this feature 
to alert users to problems.
  Log Using Datagrams:
The -d options cause logger to use datagrams rather than a stream connection to the sytem logger socket. This is an advanced feature
that you should use only if you're instructed to do so in documentation or if you understand the networking issues involved.
  Log A File:
You can log the contents of a file by using the -f file option. Be cautious with this option; if [file] is big, your system log
file can grow to a ridiculous size.
  Identify a Priority:
The -p [priority] option specifies a priority, as described earlier.  
  Log Tags:
You can add a tag with the -t [tag] option. This is useful if you want to identify a script or other program that created the log entry.
  Specify a Socket:
Ordinarily, logger calls the default system log tools to do its job. You can log directly to a network socket using the -u [socket]
option if you prefer.
  Specify a Message:
If you don't specify a file using -f [file], logger will log whatever you type after other options as the message to be logged. If you
don't provide a message on the command line, logger accepts the input you type on subsequent lines as informatin to be logged.
You should terminate such input by pressing Ctrl+D



        Rotating log files
        
Log files can therefore grow to consume all of the availalbe partition space on which they reside. To avoid this problem, Linux employs
log file rotation tools. These tools rename and optionally compress the current log files, delete old log files, and force the logging
system to begin using new log files. 
The most common log rotation tool is a package called logrotate.
The logrotate program consults a configuration file called /etc/logrotate.conf, which includes several default settings and typically
refers to files in /etc/logrotate.d to handle specific log files.

  Sample of /etc/logrotate.conf file:
-----------------------------------------------------------
# Rotate log weekly
weekly
# keep 4 weeks of old logs
rotate 4
# create new log files after rotation
create
# compress old log files
compress
# refer to files for individual package
include /etc/logratate.d
# setmiscellaneous options
notifempty
nomail
noolddir
# rotate wtmp, which isn't handled by a specific program
/var/log/wtmp {
  monthly
  create 0664 root utmp
  rotate 1
}
-----------------------------------------------------------

These definitions begin with the filename for the file (multiple filenames may be listed, separated by spaces), followed by an open
curly brace ({). They end in a close curly brace (}). Intervening lines set options that may override the defaults.

Features that are often set in these /etc/logrotate.d definitions:

  Rotated File Naming:
Ordinarily, rotated log files acquire numbers in their names, such as messages.1 for the first rotation of the messages log file. 
Using the dateext option causes the rotated log file to obtain a data code instead, as in message-20130210 for the rotation 
performed on February 10, 2013.
  Compression Options:
As already noted, 'compress' causes logrotate to compress log files to save space. This is done using gzip by default, but you can 
specify another program with the 'compresscmd' keyword, as in 'compresscmd bzip2' to use bzip2. The 'compress options' keywork enables
you to pass options to the compression command.
  Creation of New Log Files:
The 'create' options causes logrotate to create a new log file for use by the system logger or program. This option takes a file mode,
an owner, and a group as additional options. Some programs don't work well with this option, though. Most of them use the 'copytruncate'
option instead, which tells logrotate to copy the old log file to a new name and then clear all of the data out of the original file.
  Time Options:
The 'daily', 'weekly', and 'monthly' options tell the sytem to rotate the log files at the specified intervals. These options aren't
always used. Some configurations use a size threshold rather than a time threshold for when to rotate log files.
  Size Options:
The 'size' keywork sets a maximum size for a log file. It takes a size in bytes as an argument (adding K, M, or G to the size changes
it to kilobytes, megabytes, or gigabytes, respectively). For instance, 'size 100k' causes logrotate to rotate the file when it reaches
100kB in size.
  Rotation Options:
The rotate x option causes x copies of old log files to be maintained. For instance, if you set rotate 2 for the /var/log/messages file,
logrotate will maintain /var/log/messages.1 and /var/log/messages.2 in addition to the active /var/log/messages file. When that file is
rotated, the following occurs in the /var/log/ directory:
            messages.2 is deleted
            messages.1 is renamed to messages.2
            messages is renamed to messages.1
            A new messages file is created
  Mail Options:
If you use 'mail address', logrotate will email a log file to the specified address when it's rotated out of existence. Using 'nomail'
causes the system not to send any email; the log is quietly deleted.
  Scripts:
The 'prerotate' and 'postrotate' keywords both begin a series of lines that are treated as scripts to be run immediately before or 
after log file rotation, respectively. In both cases, these scripts end with the 'endscript' keyword. These commands are frequently
use to force 'syslogd' or a server to begin using a new log file.

      To Monitor Log file:      tail -f /var/log/messages



                                                          systemd
                                                          
The systemd journal service provides backward compatibility for most syslogd functionality. Special configuration files, different log
file search utilities, and a vastly more secure logging function are just a few of the modifications.

The three primar systemd journal service components:
  1:  Daemon: The systemd journaling service is handled by the systemd-journald daemon.
  2:  Configuration file: The journal service's configuration is set in the /etc/systemd/journald.conf file.
  3:  Search utility: The program used to search through the journal log files is 'journalctl'.
  
        systemd-journald  
  
The systemd-journald daemon is a system service that brins together and stores logging data. What differentiates it from the
rsyslogd and syslogd daemons is that it provides structure and indexed log files (called journals) in a secure manner. Therefore,
not only are the journal files easier to search, it is harder for system intruders to cover their tracks.

Another advantage of using the systemd-journald service over traditional logging daemons is that journal files are automatically
rotated if they grow above certain limits. This reduces log file maintenance issues and complexity.
There are two types of journal message data files:
  1:  system
  2:  user
System journal message data files are owned by a special group, systemd-journal. The systemd-journal members can read the journal
message data files but not write to them. Only the systemd-journald daemon can write message data to the journals. By default,
each user who logs into the system has journal message data collected and stored. Users do not own their journal message data files,
nor can they manually write data to them. They can, however, read their files. Once up and running, the service stores persistent
journal data in the /var/log/journal/ directory, if configured to do so.

        Configuring systemd-journald
        
The systemd-journald service is configured using the /etc/systemd/journald.conf file.
    
Setting in journald.conf:
    
    Setting the Journal Data Location:
The 'Storage' option setting determines where to store the journal data. The primary values for this option are 'auto', 'persistent',
'volatile', and 'none'. 
Most systems have the 'Storage' option set to 'auto'. The 'auto' value will configure journald to store journal
log data in the /var/log/journal/ directory. However, the diretory must already exist and have the proper permissions set. If it does
not exist, then journal data is stored in the volatile /run/log/journal/ directory, and the data is erased when the system shuts down.
The 'persistent' value is similar to 'auto'; however, it automatically creates the /var/log/journal/ directory if needed.
The 'volatile' value keeps the journal data only in the /run/log/journal/ directory.
The 'none' values sets no data to be kept, and any data received by the systemd-journald daemon is discarded.
    Compressing the Journal data:
You can reduce journal file space consumption via compression. The 'compress' option set to 'yes' will compress journal log data
using xz compression.
    Controlling Journal Data Filesystem Space Usage:
There are six /etc/systemd/journald.conf options that control filesystem space usage.
Three options have the 'System' prefix in their name and are used only for /var/log/journal/ data. 
The other three options have the 'Runtime' prefix and 'RuntimeMaxUse' options determine the maximum filesystem space amount that the
journal data may consume. It is stated as a percentage and defaults to 10%.
The 'SystemKeepFree' and 'RuntimeKeepFree' options determine the minimum amount of filesystem space that must be available for other 
applications or uses. It is stated as a percentage and defaults to 15%. This setting may be modified by the systemd-journald daemon
at system boot time if the current free filesystem space is below the configured setting.
  Rotating Journal Data Files:
The journald daemon rotates journal data files if you simply set an option in the /etc/systemd/journald.conf configuration file. One
option is SystemMaxFileSize. Data file rotation is then triggered by journal data file 'size'. By default, the size of the 
SystemMaxFileSize is set to 1/8 of the SystemMaxUse size setting. You con specify the size value in bytes or use size unit suffixes 
such as K, M, G, T, and so on.
The other option, MaxFileSec, determines the rotation scedule via a 'time increment'. The MaxFileSec value is often set to 1month,
indicating that file rotation will occur after the data is one month old. The various time settings are suffixed by time units, such
as year, month, week, and so on.
  Sharing Journal Data:
For backward compatibility purposes, you can set the journald daemon to share data with the syslogd, rsyslogd, or klogd daemons. This
is accomplished via the ForwardToSyslog and ForwardToKMsg options.
When the FowardToSyslog option is set to yes, messages received by the journal daemon are forwarded to the syslogd or rsyslogd. When
the ForwardToKMsg option is set yes, data received by journald is forwarded to kernel log buffer.



        Journalctl

To view all of the systemd-journald collected data, the journalctl utility is used.
To view the collected system journal data useing journalctl, you canoperate as a superuser. An even better technique is to add users
who need access to system journal data to the systemd-journal group.
Remember, users do not need to belong to the special group to view their own journal data.
If you just want to view all of the journal data entries starting with the oldest first, simply use journalctl with no options.

  
  
          journalctl [options...] [matches...]
  
  journalctl options:
-a  Display all data fields, including long fields and unprintable characters.
-e  Jump to the data file's end inside the pager utility.
-l  Display all printable data fields fully.
-n [number] Show the most recent journal data and limit it to [number] of lines. 
    If [number] is not specified, it shows 10 recent data lines.
-r  Reverse the output of the journal data so that the newest data shows first.

  journalctl matches:
The matches option can specify any special journal fields or fields that are aplication defined. All of the special journal fields can
be found in the systemd.journal-fields man pages and fall into four main categories.
  1:  User  - Fields passed directly from a client application and stored in the journal data.
  2:  Trusted - Trusted fields added only by the systemd-journald daemon.
  3:  Kernel  - Kernel messages stored in the journal data.
  4:  Fields logged on a different program's behalf - Its category name says it all.
  
  Fields used as matches options:
PRIORITY=value: Compatible with the syslogd priority setttings, the 'value' parameter is set between 0 for emerg and 7 for debug to find
journal data for thses priority.
_UID=user_id: user_id is set to a particular user's UID to find journal data concerning a particular user.
_HOSTNAME=hostname: Journal data messages are found that concern a particular originating host.
_TRANSPORT=transport: Journal data received from the 'transport' parameter is displayed. The 'transport' parameter is set to driver,
syslog, journal, stdout, or kernel.
_UDEV_SYSNAME=device_name:  Displays journal data kernel messages for device_name. Valid device_name settings show in the /sys/ directory.
OBJECT_PID=process_ID:  Journal message data related to a program with the PID of process_ID.


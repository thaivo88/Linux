            Examining Process Lists
      ps (processes's status): monitoring what's happening on a system.
ps supports three different types of options as well as many options within each type:
  1) Unix98 Options: These single-character options may be grouped together and are preceded by a single dash (-).
  2) BSD Options: These single-character options may be grouped together and must not be preceded by a dash.
  3) GNU Long Option: These multi-character options are never grouped together. They're preceded by two dashes (--).

 Options that may be grouped together may be clustered without spaces between them. For instance, rather than typing ps -a -f >> ps -af
 The reason for so complexity is that the ps utility has a varied a lot from one Unix OS to another.
 You can change some of its default behaviors by setting the PS_PERSONALITY environment variable to posix,old,linux,bsd,sun,digital.


            ps Option:
  Display Help: --help
  Display All Processes: 
-A and -e: Cause it to display all of the processes on the system, by default ps only display processes that were run from its own terminal.
-x: displays all the processes owned by the user who gives the command
  Display One User's Processes: -u [username] or U [username] or --User [username]
You can display processes owned by a given user with username or user ID.
  Display Extra Information: -f, -l, j, l, u, v
Expand the information provided in the ps output.
  Display Process Hierarchy: -H, -f, and --forest
Group processes and use indentation to show the hierarchy of relationships between processes.
  Display Wide Output: -w or w
Normally ps output to fit the screen or xterm; ps can output more than 80 columns wide. You can set the wide columns with w option for more information.

          Columns details:
Username:
    This is the name of the user who runs the programs.
Process ID (PID):
    PID is a number that's associated with the process.
Parent Process ID (PPID):
    PPID identifes the process's parent.
TTY teletype:
    a code used to identify a terminal. X program and daemons do not have tty. Text-mode programs doe have tty which point to a console/xterm.
CPU time:
    The TIME and %CPU heading are two measures of CPU time used. The first indicates the total amount of CPU time consumed, and the sceond
    represents the percentage of CPU time the process is using when ps executes.
CPU Priority
    Show the different priorities for different processes for CPU time. The NI column list the priority code. default value is 0.
    Positive values represent reduced priority
    Negative values represent increased priority.
Memory Use
    RSS is resident set size (the memory used by the program and its data)
    %MEM is the percent of memory the program is using
    SHARE memory that's shared with other processes (such as shared libraries)
    CPU-use measures, can help point you to the sources of difficulties
Command
    command used to launch the process
    


                    top
If you want to know how much CPU time various processes are consuming relative to one another, or if you want to discover quickly which processes
are consuming the most CPU time, a tool called top is the one for the job. By default, top sorts its entries by CPU use, and it update every seconds.

            top options:
-d delay: delay between updates, which is usually 5 seconds
-p pid: monitor specific processes
-n iter: to display a certain number of updates (iter) and then quit
-b: specifies batch mode

            single letter command during top
h or ? : display help information
k : kill a process but you must know the pid
q : quit top
r : change a process's priority
            positive value will decrease its priority
            negative value will increase its priority
s : changes the display's update rate
P : set the display to sort by CPU usage
M : change the display to sort by memory usage

One of the pieces of information provided by top is the load average, which is a measure of the demand for CPU time by applications.
You can see three load average on top; these correspond to the current load average and two previous measures.
     A system on which no programs are demanding CPU time has a load average of 0.0
     A system with one program running CPU intensive tasks has a load average of 1.0
                   
            uptime
You can also find the current load average using uptime, which display the load average along with information on how long the computer has been running.

Most computers today include multiple CPUs or CPU cores. On such systems, the load average can equal the number of CPUs or cores before competiton for CPU time begins.
example: quad-core CPU the load average can be as high as 4.0 without causing contention.



            jobs
The jobs command displays minimal information about the processes associated with the current session. Job ID number.
The job ID numbers are used by a handful of utilities in place of PIDs. A second use of jobs is to ensure that all of your programs
have terminated prior to logging out.

            pgrep
Perform simple searches within the process list; similar to piping the ps command output to the grep command.
ps | grep >> pgrep

            Foreground and backgroud processes
If a program is running but you devide you want to use that terminal for something else, pressing Ctrl+Z normally pasues the program
and gives you control of the terminal. This can be handy if you, you're running a text editor in a text-mode login and you want to check
the filename so that you can mention it in the file you're editing. You press Ctrl+Z and type 'ls' to get the file listing. To get back
to the text editor, you then type fg, which restores the text editor to the foreground of your terminal. If you suspended several process,
you can add a job number, as in fg 2, to restore job 2. List jobs with 'jobs' command.
Whereas fg restores a job to the foreground, bg restores a job to running status, but in the backgroud.
As an alternative to launching a program, using Ctrl+Z, and typing 'bg' to run a program in the backgroud, you can append and ampersand '&'
to the command when launching the program.
  Ctrl+Z    # then
  fg | fg [job_number]   # or
  bg | bg [job_number]
  
  [command] & 
  example: vi myfile.txt &
  
            Managing Process Priorities (nice | renice)
You may have a job that's more important than others that are running, so you may want to give it a priority boost. To accomplish this goal
is through the 'nice' and 'renice' commands. You can use 'nice' to launch a program with a speficied priority or use 'renice' to alter
the priority of a running program.
nice: before starting
renice: during the process
If you omit the adjustment value, 'nice' uses 10 as a default.
Range -20 to 19
Negative values having the highest priority
The default priority for a program without 'nice' is 0
  nice [argument] [command [command-argument]]
  nice -[number] [command]                      nice -12 number-crunch data.txt     
  nice -n [number] [command]                    nice -n 12 number-crunch data.txt   (this works well for positive number but looks weird with negative number)
  nice --adjustment=[number] [command]          nice --adjustment=12 number-crunch data.txt
'renice' program to alter its priority without disrupting the program's operation.
  renice priority [[-p] pids] [[-g] pgrps] [[-u] users]

            Killing Processes
            

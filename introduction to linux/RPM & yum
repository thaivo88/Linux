                          RPM Base Distro:
-SUSE  
-RedHat: splintered into three distributions:
  -Fedora version favored by home users, students, and business on tight budget
  -CentOS is a freely redistributable version intended for enterprise users
  -RedHat reserved for the for-pay version of the distribution

                          packagename-a.b.c-x.arch.rpm
                          
Package Name: The first component (packagename) is the name of the package.
Note: the same program may be given different package names by different distribution maintainers.

Version Number: The second component (a.b.c) is the package version number.

Build Number: The number following the version number (x) is the build number (also known as the release number).
This number represents minor changes made by the package maintainer, not by the program author.
Many distribution maintainers add a letter code to the build number to distinguish their packages from those of others.
Note: that these numbers are not comparable across package maintainers.

Architecture: The final component preceding the .rpm extenstion (arch) is the code for the package's architecture.
CPU-independent packages generally use the noarch architecture code.
The main execption to this rule is source RPMs, which use the src architecture code.

                        RPM package compatibility issues:
                        
-Distributions may be different versions of the RPM utilities.
-An RPM package designed for one distribution may have dependencies that are unmet in another distribution.
    A package may require a newer version of a library than is present on the distribution you're using.
    To overcome this problem by installing or upgrading the package dependencies, but sometimes doing so causes problems
    because the upgrade may break other packages. By rebuilding the package you want to install from a source RPM,
    you can often work around these problem, but sometimes the underlying source code also needs the upgraded libraries.
-An RPM package may be built to depend on a package of a particular name, but if the distribution you're using
    has named the package differently, the RPM utility will object. You can override this objection by using the --nodeps switch.
-Different distributions may include slightly different files in their packages. 
-Some programs include distribution-specific scripts or configuration files. This problem is particularly acute for servers,
    which may include startup scripts that go in /etc/rc.d/init.d or elsewhere. To overcome this requires you to remove
    the offending scripts after installing the RPM.
    
                      rpm [operation][options] [package-files|package-names]

RPM Operations:
-i                    installs a package
-U                    installs a new package or upgrades an existing one
-F or --freshen       upgrades a package only if an earlier version already exists
-q                    queries a package; finds whether a package is installed, what files it contains, and so on
-V or --verify        verifies a package; checks that its files are present and unchanged since installation
-e                    uninstall a package
-b                    builds a binary package, given source code and configuration files; moved to the rpmbuild program with RPM version 4.2
--rebuild             builds a binary package, given a source RPM file; moved to the rpmbuild program with RPM version 4.2
--rebuilddb           rebuilds the RPM database to fix errors

RPM options:
option                  used with
--root [dir]              any            modifies the linux system having a root directory located at [dir].
--force                 -i -U -F         forces installation of a package even when it means overwriting existing packages.
-h or --hash            -i -U -F         displays a series of hash marks to indicate the progress of the operation
-v                      -i -U -F         used in conjunction with the -h option to produce a uniform number of hash marks for each package
--nodeps                -i -U -F -E      specifies that no dependency checks be performed. Installs or removes the package even if it relies on a package or file that's not present or is required by a package that's not being uninstalled.
--test                  -i -U -F         Checks for dependencies, conflicts, and other problems without actually installing the package.
--prefix path           -i -U -F         Sets the installation directory to path (works only for some package)
-a or --all             -q -V            Queries or verifies all packages
-f file or --file file  -q -V            Queries or verifies the package that owns file
-p package-file         -q               queries the uninstalled RPM package-file
-i                      -q               Displays package information, including the package maintainer, a short description, and so on.
-R or --requires        -q               Displays the packages and files on which this one depends.
-l or --list            -q               Displays the files contained in the package.

# to downgrade/install older version
  rpm -Uvh --oldpackage [filename]
  
# See where the files land
  rpm -qlp <filename>.rpm

                        Extracting Data from RPMs
Occasionally you may want to extract data from RPMs without installing the package. For instance, this can be a good way to retrieve the
original source code from a source RPM for compiling the software without the help of the RPM tools or to retrieve fonts or other nonprogram
data for use on a non-RPM system.
RPM files are actually modified cpio archives. Converting the files into cpio files is relatively straightforward, whereupon you can use cpio
to retrieve the individual files. To do this job, you need to use the rpm2cpio program.

You can then extract the data using cpio, which takes the -i option to extract an archive and --make-directories to create directories:
    $ cpio -i --make-directories < samba-4.1.9-4.fc20.src.cpio
Alternatively, you can use a pipe to link these two commands together without creating an intermediary file:
    $ rpm2cpio samba-4.1.9-4.fc20.src.rpm | cpio -i --make-directories
The result is an extraction of the files in the archive in the current directory.

Another option for extracting data from RPMs is to use alien:   This program convert RPM into Bebia package or a tarball.

                    Using Yum 
                    
Yellow Dog Linux distribution

Yum is one of several meta-packagers--it enables you to install a package and all its dependencies easily using a single command line.
When using Yum, you don't even need to locate and download the package files because Yum does this for you by searching in one or more reposioties
Internet sites that host RPM files for a particular distribution.

Common Yum commands
install                       Installs one or more packages by package name. Also installs dependencies of the specified package or packages.
update                        Updates the specified package or packages to the lates avilable version. if no packages are specified, yum updates every installed package.
check-update                  Checks to see whether updates are available. If they are, yum displays their names, versions, and repository area
upgrade                       Works like update with the --obsoletes flag set, which handles obsolete packages in a way that's superior when performing a distribution version upgrade.
remove or erase               Deletes a package from the system; similar to rpm -e, but yum also removes depended-on packages.
list                          Displays information about a package, such as the installed version and whether an update is available.
provides or whatprovides      Displays information about packages that provide a specified program or feature. For instance, typing yum provies samba lists all the samba-related packages, incluing every available update. Note that the output can be copious.
search                        Searches package names, summaries, packagers, and descriptions for a specified keyword. this is useful if you don't know a package's name but can think of a word that's linkely to appear in one of these fields but not in these fields for other packages.
info                          Displays information about a package, similar to the rpm -qi command.
clean                         Cleans up the yum cache directory. Running this comman from time to time is advisable, lest downloaded packages chew up too much disk space.
shell                         Enters the yum shell mode, in chich you cna enter multiple yum commands one after another.
resolvedep                    Displas packages matching the specified dependency.
localinstall                  Installs the specified local RPM files, using your Yum repositories to resolve dependencies.
localupdate                   Updates the system using the specified local RPM files, using you Yum repositories to resolve dependensies. Package other than those updated by local files and their dependencies are not updated.
deplist                       Displays dependenciesof the specified package.

Yum has its limits, though; it's only a good as its reposioties, so it can't install software that's not stored in these repositories.

If you don't want to install the package buy merely want to obtain it, you can use yumdown-loader. Type this command followed by the name
of a package and the latest version of the package will be downloaded to the current direcotory. this can be handyh if you need to update a system
tha's not connected to the internet; you can use another computer that runs the same distribution to obtain the packages and then transferthem to the target system.

GUI front-ends to yum exist.
examples include yumex and kyum
    install these front-ends: yum install kyum
    
                            RPM and Yum configuration files
                       
The main RPM configuration files is /usr/lib/rpm/rpmrc. This file sets a variety of options, 
mostly related to the CPU optimizations used when compiling source packages.
You shouldn't edit this file, though; instead, you should create and edit: 
    /etc/rpmrc (to make global changes)
    ~/.rpmrc  (to make changes on a per-user basis) (~ : home directory of user)
Yum is configured via the /etc/yum.conf file, with additional configuration files in the /etc/yum.repos.d directory.
The yum.conf file holds basic options, such as the directory to which Yum downloads RPMs and where Yum logs its activities.



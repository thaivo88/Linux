It's the 'init' program's job to start all of those programs when the linux system starts up. This is called the initialization process.
There are currently three popular initialization process methods used in linux distributions:
  1:  Unix System V (SysV)        /etc/init.d
  2:  systemd                     /usr/lib/systemd
  3:  Upstart                     /usr/share/upstart
  
The original linux 'init' program was based on the unix system V 'init' program, and it become commonly called SysV. The SysV 'init'
program uses a series of shell scripts, divided into separate runlevels, to determine what programs run at what times. Each program uses
a separate shell script to start and stop the program. The system administrator sets the runlevel in which the linux system starts, 
which in turn determines which set of programs is running.
            service - runlevel1     service - runlevel2     service - runlevel3 .....

Upstart version of the 'init' program was developed as part of the Ubuntu Linux distribution. Its main goal was to handle the dynamic
environment that hotplug devices cause in linux. Upstart method uses separate configuration files for each service, and each service
configuration file sets the runlevel in which the service should start. One service file that's used for multiple runlevels.
            service - (runlevel1-6)

The systemd program was developed by the Red Hat linux distribution to handle dynamic linux environments as well. Similar to Upstart,
it too uses separate configuration files to define program behavior.
            service - (runlevel1-6)



                              SysV
The key to the SysV initialization process is runlevels. The 'init' program determines what services to start based on the runlevel
of the system. Runlevels are numbered from 0 to 6, and each one is assigned a set of services that should be active for that runlevel.

            Runlevel Functions
Single-user mode, to get to this mode when booting linux, you use 1, S, or s, or single as an option 
passed to the kernel by the boot loader. Single-user mode is simply an available runlevel for your system.
Runlevels 0, 1, and 6 are reserved for special purpose. If you run into peculiar runlevel numbers, consult /etc/inittab
it defines them and often contains comments explaining the various runlevels.

Runlevel    Purpose
--------------------------------------------------------------------------------------------------------------------------------
0           A transitional runlevel; used to shift the computer from one state to another. It shuts down the system.
1,s,S       Single-user mode. Low-level system maintenance.
2           On Debian base. A full multi-user mode with X running and a graphical login. 
3           On Fedora, Mandriva, Redhat base. A full multi-user mode with a console (nongraphical) login screen. (CLI)
4           Undefined by default. Customization.
5           On Fedora, Mandriva, Redhat base. Same behavior as runlevel 3; having X run with an XDM (graphical) login
6           A transitional runlevel. Used to reboot the system.
--------------------------------------------------------------------------------------------------------------------------------

Don't configure your default runlevel to 0 or 6. If you do, your system will immediately shut down or reboot once it finishes
powering up.

There are two main ways to affect what programs run when you enter a new SysV runlevel. The first is to add or delete entries
in your /etc/inittab file.

Basics of the /etc/inittab file
Each line consists of four colondelimited fields:

    [id]:[runleves]:[action]:[process]

Identification Code:  The 'id' field consists of a sequence of one to four characters that identifies its function.
Applicable Runlevels: The 'runlevels' field consists of a list of runlevels for which this entry applies.
Action to be Taken: Specific codes in the 'action' field tell 'init' how to treat the process. 
  'Wait' tells 'init' to start the process once when entering a runlevel and to wait for the process's termination,
  'respawn' tells 'init' to restart the process whenever it terminates
Process to Run: The 'process' field is the process to run for this entry.

These lines specify scripts or programs that are to be run when the specified runlevel is entered.





                                SysV initialization
The /etc/init.d/rc or /etc/rc.d/rc script performs the crucial task of running all of the scripts associated wht the runlevel. 
The runlevel-specific scripts are stored in /etc/rc.d/rc?.d, /etc/init.d/rc?.d, /etc/rc?.d or a similar location. (? is the runlevel)
When entering a runlevel, 'rc' passes the 'start' parameter to all the scripts with names that begin with a captial S, 
and it passes the 'stop' parameter to all of the scripts with names that begin with a capital 'K'. 
These SysV startup scripts start or stop services depending on the parameter they're passed, 
so the naming of the scripts controls whether they're started or stopped when a runlevel is entered.
These scripts are also numbered, as in S10network and K35smb. The 'rc' program runs the scripts in numeric order.
Control the order in which scriipts run by giving them appropriate numbers. 
This control is important because some services depend on others.
The files in the SysV runlevel directories are symbolic links to the main scripts, which are typically stored in /etc/rc.d, /etc/init.d
or /etc/rc.d/init.d

The SysV startup scripts in the runlevel directories are symbolic links back to the original script. This is done so that you don't 
need to copy the same script into each runlevel directory. Instead, you can modify the original script without having to track down
its copies inall of the SysV runlevel directories.

Numerous utility programs are available to help you manage these links, suck as 'chkconfig', 'update-rc.d', and 'rc-update'.
To list the services and their applicable runlevels with 'chkconfig', use the --list option.
To modify the runlevels in which a service runs, use a command like this:

    chkconfig --level [0|1|2|3|4|5|6] [service] [on|off|reset]
    chkconfig --level 23 nfs-common on

You can use 'on' to activate the script, 'off' to deactivate it, or 'reset' to set it to default value.
If you've added a startup script to the main SysV startup script directory, you can have 'chkconfig' register it and add appropriate 
start and stop links in the runlevel directories. 'chkconfig' inspects the script for special comments to indicate default runlevels.

    chkconfig --add nfs-common

This command adds the nfs-common script to those managed by 'chkconfig'



Different runlevel checks are possible: checking your default runlevel and checking your current runlevel.
On a SysV-based system, you can determine your default runlevel by inspecting the /etc/inittab
If you want to change the default runlevel for the next time you boot your system, edit the 'initdefault' line in /etc/inittab and
change the runlevel field to the value you want.

The first character is the previous runlevel. When the character is 'N', this means the system hasn't switched runlevel since booting.
kIt's possible to switch to different runlevels on a running system with the 'init' and 'telinit' programs. The second character in the
runlevel output is your current runlevel.

The 'init' process is the first process run by the Linux kernel.
A variant of 'init' is 'telinit'.
With 'telinit' you can also take the 'Q' or 'q' option to have the tool reread /etc/inittab and implement any changes if finds there.

Although you can shut down or reboot the computer with 'init', doing so has some problems. One issue is that it's simply an unintuitive
command for this action. Another is that changing runlevels with 'init' causes an immediate change to the new runlevel. This may
cause other users on your system some aggravation because they'll be given no warning about the shutdown.
The 'shutdown' program sends a message to all users who are logged into your system and prevents other users from logging in during the
process of changing runlevels. The 'shutdown' command also lets you specify when to effect the runlevel change so that users have
time to exit editors and safely stop other processes that they may have running.

hh:mm   for a time in 24-hour clock format (6:00 for 6:00 am or 13:30 for 1:30 pm)
+m      m for a time in minutes in the future
-r      reboot the system
-H      halts (terminates operation but doesn't power it off)
-h      power off
-p      powers off

    shutdown now
    shutdown -h +15 "systm going down for maintenance"                    reboots in 15min
    shutdown -c "never mind"                                              cancel shutdown command

Three additional shortcut commands are halt, reboot, and poweroff






                                systemd initialization
The 'systemd initialization process'method is quickly gaining in popularity in the Linux world. Instead of lots of small initialization
shell scripts, the systemd method uses one monolithic program that uses individual configuration files for each service.

Instead of using shell scripts and runlevels, the systemd method use 'units' and 'targets'. A systemd unit defines a service or action
on the system. It consists of a name, a type, and a configuration file. There are currently eight different types of systemd units:
    automount
    device
    mount
    path
    service
    snapshot
    socket
    target

You use the 'systemctl' command to list the units currently loaded in your linux system.
    systemctl list-units
    
The systemd method uses service-type units to manage the daemons on the Linux system. The target-type units are important in that
they group multiple units together so that they can be started at the same time. Each target represents a different group of services
that should be running on the system. Instead of changing runlevels to alter what's running on the sytem, you just change target.
To make the transition from SysV to systemd smoother, there are target that mimic the standard 0 through 6 SysV runlevel,
called 'runlevel0.target' through 'runlevel6.target'.

Each unit requires a configuration file that defines what program it starts and how it should start the program. The systemd system
stores unit configuration files in the /lib/systemd/system folder.
Target units also use configuration files. They don't define programs but instead define which service units to start.

The default target used whenthe Linux system boots is defined in the /etc/systemd/system folder as the file 'default.target'.
This is the file the systemd program looks for when it starts up. This file is normally set as a link to a standard target file in the
/lib/systemd/system folder.

----------------------------------------------------------------------------------------------------------------------------------
systemctl command name    Explanation
----------------------------------------------------------------------------------------------------------------------------------
list-units                Displays the current status of all configured units.
default                   Changes to the default target unit.
isolate                   Starts the named unit and stops all others.
start [name]              Starts the named unit
stop [name]               Stop the named unit
reload [name]             Causes the named unit to reload its configuration file.
restart [name]            Cause the named unit to shutdown and restart.
status [name]             Displays the status of the name units.
enable [name]             Configures the unit to start when the computer next boots.
disable [name]            Configures the unit not to start when the computer next boots.
----------------------------------------------------------------------------------------------------------------------------------                        






                                  Upstart initialization
Broadly speaking, Upstart does the same job as the SysV scripts, but Upstart is designed to better handle today's 
dynamically changing hotplug hardware. Upstart does away with /etc/inittab, instead providing an integrated set of startup script that
can, in principle, completely replace the SysV-style /etc/inittab and runlevel-specific startup scripts.

A system that uses nothing but Upstart and its native scripts replaces both /etc/inittab and the runlevel-specific SysV startup script
directories with scripts in the /etc/init directory.
To change the runlevels in which a particular service runs, you'll have to edit its configuration file in a text editor.
Locate the script, typically /etc/init/[name].conf where [name] is the name of the serivce.
      initctl reload
To have Upstart reread its configuration files.

Because the SysV startup script system has been so common for so long, a large number of software packages include SysV startup scripts.
To accommodate such packages, Upstart provides a compatibility mode: it runs SysV startup scripts in the usual locations.
(/etc/rc.d/rc?.d, /etc/init.d/rc?.d, /etc/rc?.d, or a similar location). Thus, if you install a package that doesn't yet include an
Upstart configuration script, it should still launch in the usual way.

You may find, however, that 'chkconfig' and other SysV-based tools no longer work for some services. As time goes on, this is likely to 
be true for more and more services because the developers of distriburtions that favor Upstart may convert their packages' startup
scripts to use Upstart-native methods.





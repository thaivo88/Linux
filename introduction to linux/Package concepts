Linux package management tool.
The foundation upon which all of these programs rely is the Linux kernel.
A kernel is the lowest level of easily replaceable software that interfaces with the hardware in your computer. 
It is responsible for interfacing all of your applications that are running in “user mode” down to the physical hardware, 
and allowing processes, known as servers, to get information from each other using inter-process communication (IPC).

Packages:
The most basic information that package systems maintain is information about software packages-that is, collections of files that are
installed on the computer. Packages are usually distributed as single files that are similar to tarballs 
(archives created with the tar utility and usually compressed with gzip or bzip2) or zip files.
Once installed, most packages consist of dozens or hundreds of files, and the package system tracks them all.

Installed File Database:
Package systems maintain a database of installed files. The database includes information about every file installed 
via the package system, the name of the package to which each of theose files belongs, and associated additional information.

Dependencies:
One of the most important types of information maintained by the package system is dependency information-that is, 
the requirements of packages for one another. 

Checksums:
The package system maintains checksums and assorted ancillary information about the file. 
This information can be used to verify the validity of the installed software.

Upgrades and Uninstallation:
By tracking files and dependencies, package systems permit easy upgrades and uninstallation: 
Tell the package system to upgrade or removed a package, and it will replace or remove every file in the package.

Binary Package Creation:
Both RPM and Debian package system provide tools to help create binary packages (those that are installed directly) from source code.
This feature is particularly helpful if you're running Linux on a peculiar CPU: you can download source code and create a binary package,
even if the developers didn't provide explicit support for your CPU. Creating a binary package from source has advantages over compiling
software from source in more conventional ways, because you can then use the package management system to track dependencies,
attend to individual files.

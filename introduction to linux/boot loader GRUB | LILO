The computer's boot process begins with a program called a 'boot loader'. This program runs before any OS has loaded, although you
normally install and configure it from within Linux.
In Linux, the most-used boot loader is the Grand Unified Boot Loader (GRUB)
There is also the older linux boot loader, the Linux Loader (LILO)

Your computer's firmware reads the boot loader into memory from the hard disk and executes it. The boot loader, in turn, is responsible
for loading the Linux kernel into memory and starting it.
The boot process begins with the BIOS, the BIOS which boot device to use.
The BIOS loads code from the Master Boot Record (MBR), which is the first sector on the hard disk. 
This code is the primary boot loader code.
    _______   _____________________ B (BIOS > MRB > Kernel)
 __|___   _|_|_____________________|___________________________
|      | |     |                                               |
| BIOS | | MRB | Boot Sector  |  Kernel  |  Non-Boot Partition |
|______| |_____|_______________________________________________|
    |      | |         | |         |
    -------- ----------- ----------- A (BIOS > MRB > Boot Sector > Kernel)
          
    The primary boot loader does one of the two things:
1: It examines the partition table and locates the partition that's marked as bootable. The primary boot loader then loads the boot sector
   from that partition and executes it. This boot sector contains a secondary boot loader, which continues the process by locating an OS
   kernel, loading it, and executing it. This option is depicted by the Line A
2: It locate an OS kernel, loads it, and executes it directly. This approach bypasses the secondary boot loader entirely, as depicted 
   by Line B.
   
    ______________________     ______________________ B (EFI > Loader2.efi > kernel2)  
 __|___   ________________|___|______________________|________
|      | | Loader1.efi  Loader2.efi                           |
| EFI  | |            ESP            |  Kernel  |  Kernel2    |
|______| |____________________________________________________|
   |         | |                          |
    ---------   -------------------------- A (EFI > Loader1.efi > kernel1)   
    
Instead of relying on code stored in boot sectors on the hard disk, EFI relies on boot loaders stored as files in a disk partition known
as the EFI System Partition (ESP), which uses the File Allocation Table (FAT) filesystem.
ESP is typically mounted at /boot/efi

GRUB is the default boot loader for most Linux distributions; however, GRUB is really two boot loaders:
1: GRUB Legacy
2: GRUB 2

  GRUB Legacy
The usual location for GRUB Legacy's configuration file on a BIOS-based computer is /boot/grub/menu.lst.
Some distributions use the filename grub.conf rather than menu.list
GRUB Legacy supports BIOS but not EFI

GRUB donesn't refer to disk drives by device filename the way that linux does. 
GRUB numbers drives, so instead of /dev/hda or /dev/sda, GRUB uses (hd0).
GRUB Legacy's drive mappings can be found in the /boot/grub/device.map file.
GRUB Legacy numbers partitions on a drive starting at 0 instead of the 1
Grub Legacy separates partition numbers from drive numbers with a comma, as in (hd0,0) for the first partition on the first disk.
GRUB's root partition is the partition in which GRUB's configuration file (menu.lst or grub.conf) resides.
Because this file is normally in linux's /boot/grub/directory, the GRUB root parttion will be the same as linux's root partition
if you do not use a separate /boot or /boot/grub partition. If you split off /boot into its own partition, as is fairly common,
GRUB's root partition will be the same as linux's /boot partition.

######################### menu.lst/grub.conf #########################
# grub.conf/menu.lst
# 
# Global Options:
# 
default=0
timeout=15
splashimage=/grub/bootimage.xpm.gz
#
# kernel image options:
#
title Fedora (3.4.1)
  root (hd0,0)
  kernel /vmlinuz-3.4.1 ro root=/dev/sda5 mem-4096M
  initrd /initrd-3.4.1
title Debian (3.4.2-experimental)
  root (hd0,0)
  kernel (hd0,0)/bzImage-3.4.2-experimental ro root=/dev/sda6
#
# Other operating system
#
title Windows
  rootnoverify (hd0,1)
  chainloader +1
################################ End ################################

Global Options
GRUB's global section precedes its per-image configurations.
    Default OS: 
        The 'default=' option tells GRUB which OS to boot. The default=0 causes the first listed OS to be booted.
    Timeout: 
        The 'timeout=' option defines how long, in seconds, to wait for user input before booting the default operation system.
    Background Graphic: 
        The 'splashimage=' line points to a graphics file that's displayed as the background for the boot process.

Kernel image option
GRUB Legacy's per-image options are often indented after the first line.
    Title: 
        The 'title' line begins a per-image stanza
    GRUB Root:
        The 'root' option specifies the location of GRUB legacy's root partition.
    Kernel Specification:
        The 'kernel' setting describes the location of the linux kernel as well as any kernel options that are to be passed to it.
        The 'ro' option tells the kernel to mount its root filesystem read-only.
        The 'root=' option specifies the linux root filesystem
    Initial RAM Disk:
        Use the 'initrd' option to specify an initial RAM disk, which holds a minimal set of drivers, utilities, and configuration files
        that the kernel uses to mount its root filesystem before the kernel can fully access the hard disk.
    Non-Linux Root:
        The 'rootnoverify' option is similar to the root option except that GRUB legacy won't try to access files on this partition.
    Chainloading:
        The 'chainloader' option tells GRUB legacy to pass control to another boot loader. It's passd a '+1' option to load the first
        sector of the target OS's root partition. (Works on BIOS computers)

The command for installing GRUB legacy on a BIOS-based computer is 'grub-install'.
You must specify the boot sector by device name when you install the boot loader.
        grub-install /dev/sda
                or
        grub-install '(hd0)'
In the second example, you need single quotes around the device name. If you want to install GRUB legacy in the boot sector of a
partition rather than in the MBR, you include a partition identifier, as in /dev/sda1 or (hd0,0)

The first screen that the GRUB Legacy boot loader shows you is a list of all of the operating systems that you specified with the 
'title' option in your GRUB configuration file.

The GRUB 2 configuration file is /boot/grub/grub.cfg
Some distributions place this file in /boot/grub2, enabling simultaneous installations of GRUB Legacy and GRUB 2.
GRUB 2 adds a number of features, such as support for loadable modules for specific filesystems and modes of operation, 
which aren't present in GRUB legacy. The 'insmod' command in the GRUB 2 configuration file loads modules.
GRUB 2 also supports conditional logic statemonets, enabling loading modules or displaying menu entries only if particular conditions are met.

######################### grub.cfg #########################
# 
# Kernel Image Options:
# 
menuentry "Fedora (3.4.1)" {
    set root=(hd0,1)
    linux /vnmlinuz-3.4.1 ro root=/dev/sda5 mem=4096M
    initrd /initrd-3.4.1
}
menuentry "Debian (3.4.2-experimental)" {
    set root=(hd0,1)
    linux (hd0,1)/bzImage-3.4.2-experimental ro root=/dev/sda6
}
#
# Other Operatiing System
#
menuentry "Window" {
    set root=(hd0,2)
    chainloader +1
}
################################ End ################################

Partitions are numbered starting from 1 rather than 0.

GRUB 2 makes further changes in that it employs a set of scripts and other tools that help automatically maintain the 
/boot/grub/grub.cfg file. The intent is that system administrators need never explicitly edit this file. Instead, you would edit files
in /etc/grub.d, and the /etc/default/grub file, to change your GRUB 2 configuration. After making such changes, you must explicitly
rebuild the grub.cfg file.



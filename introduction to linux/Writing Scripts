A shell script's first line identifies the shell that should be used to run the script.
  #!/bin/bash
The first two characters are a special code that tells the Linux kernel that this is a script.
This line is sometimes called the shebang, hashbang, hashpling, or pound bang line.
After the first line, shell scripting languages consider a hash mark (#) as a comment character. The script utility ignores characters
on a script line after the hash mark.

              Different way to run a shell script
              
When you're done writing the shell script, you can modify it so that it's executable. You do this with the chmod command, you use the
+x option to add execute permissions.
  chmod u+x my_script.sh
  
Typing the script's name, preceded by bash
This method does not require execution permission to run the script. However, it does create a subshell.
  chmod u+x my_script.sh
  bash my_script.sh
  
Typing the script's name, preceded by ./
This method does require execution permission. It also creates a subshell to run the script.
  chmod u+x my_script.sh
  ./my_script.sh
  
Just typing in the script's full path and name is needed.
This method also requires the execution permission to be set on the script. It creates a subshell to run the script as well
  chmod u+x my_script.sh
  /directory-location/my_script.sh
  
Just typing in the script's name requires the shell script to be moved to a directory on your path, such as /usr/local/bin
This is the preferred method for scripts that will be used by others.
This method requires the appropriate execution permission to be set. Since it will be used by all system users, the chmod a+x command
is used to grant execute permission to everyone. Note that the $PATH environment variable contains the directory /usr/local/bin
where the my-script.sh file was moved. Also note that this method creates a subshell when the script is run.
  mv my_script.sh /usr/local/bin/
  my_script.sh
  
Typing the script's name, preceded by sh, is nearly identical to preceding it with the bash command.
This method does not require execution permission to run the script, and it creates a subshell to run the script.
  sh my_script.sh == bash my_script.sh
  
Typing the keyword source before the script name tells the bash shell to use a method type called sourcing. 
When you source a script, a subshell is not created to run the script. This method also does not require execute permissions.
  source my_script.sh
  
Typing a dot (.) and then a space before the script name also tells the bash shell to use the sourcing method type.
This method also does not create a subshell. This method does not need execute permission permission.
  . my_script.sh == source my_script.sh
  
The last method for executing script uses the exec command. This method does need execute permission set on the file.
exec command will exit the current bash shell when it is doen running the script.
Notice that the ./ execution method has to be placed before the script's name. This is because exec is not truly a script execution
method. It does not create a subshell but instead replaces the current shell with an executable image environment to run the script.
A script execution method must be included in the exec command line in order to run a script. Cannot source a script using exec,
however. Only execution methods that create a subshell will work with the exec command.
  exec ./my_script.sh
  exec bash my_script.sh
      exec source my_script.sh == not found
      exec . my_script.sh == not found
      
The exec program's primary value is not in running scripts. Instead, it is often used to run a program from within a script.

There are only two methods listed previously that are considered sourcing methods:
  -The source command
  -The dot (.)
  
Using a sourcing method that causes a script to run in the current shell, as opposed to launching a new instance of the shell 
(subshell), has some important implications:
  - When you source a script, it will have access to environment variables set in the calling shell. This is true even if you haven't
  exported them. Without scourcing, only environment variables that you explicitly export become available to scripts you run.
  - If you source a script and if that script sets an environment variable, that variable will become available (or will be changed)
  in the calling shell's environment. If you run the script without using a sourcing method, any environment variables it sets will
  remain local to it and to the programs that it calls. This is true even if the script exports the variables.
  - Running a script without sourcing imposes overhead costs associated with launching the new shell instance (subshell). These costs
  are normally negligible, but if a script calls itself recursively or calls many other scripts, sourcing those scripts within the first
  script may improve performance.
  - Sourcing a script causes it to execute in the calling shell's language, whereas running a script normally causes it to use the shell
  language specified on the shebang line.
  
Variables' values can be passed as parameters to scripts, generated internally to te scripts, or extracted from the script's environment.



                                            Positional Parameter Variables
                                            
Variables that are passed to the script are frequently called positional parameters. The individual parameters are represented by a
dollar sign ($) followed by a number from 0 to 9. $0 stands for the name of the script, $1 is the first parameter to the script,
$2 is the second parameter, and so on.

cat homedirect.sh
    # First parameter $1 = usr[1-6]
    # Second parameter $2 = $username
    #
    # ./homedirect.sh [first_parameter] [second_parameter]
    # example:      ./homedirect.sh 2 sally
    #
    usermod -d /usr$1/$2 $2
    mkdir /usr$1/$2
    cp /etc/skel/.* /usr$1/$2/
    chown $2:users /usr$1/$2
    chown $2:users /usr$1/$2/.*
                                            


                                            User-Defined Variables
                                            
A user-defined variable is a variable defined by a user for various purposes, such as temprarily storing data. It can be used within a
script or at the command lin.
  example:
    ]$ My_Var="Hello World"
    ]$ echo $My_Var
    Hello World
    
Once the variable has been set, various programs or other commands can use it, such as the echo command. There is no dollar sign ($) in
the variable's name. However, when used with the echo command, the dollar sign must be included.

Doing thing WITH the varible, use the dollar sign.
Doing anything TO the variable, such as assigning a value to it, don't use the dollar sign.

                   unset command:

You can remove both environment and user-defined variables. The unset command accoplishes this task.

Variables are often assigned within scripts. They may hold data pertinent for a script's execution. Script variables can also be set 
from a command's output, which is useful! You can then use these variables' values in conjunction with normal commands as if they were
command parameters.

Be careful when creating new variable names. It is best to use either all lowercase names or mixed-case names. Remember that most
environment variable names are all uppercase letters.

                  Command Substitiution
                  
You can capture a command's results by placing the command between two parentheses and preceding it with a dollar sign. Instead of its
output going to the display (STDOUT), it is redirected to the User_Record variable. This method of storing a command's results in a 
variable is sometimes called "command substitution".
  User_Record=$(grep $Username /etc/passwd)
The variable User_Record is now set to grep $Username /etc/passwd

There is an older method for storing a command's results in a variable using back-tick (`) characters. Back-tick characters are not
single quotes ('). The back-tick key is typically shared with the tilde (~) character on the keyboard.
  `grep $Username /etc/passwd`  ==  $(grep $Username /etc/passwd)
                  
                  Read Command
                  
In addition to assigning variables with the assignment operator (=), you can read variables from standard input using the read command,
as in read response_variable, to read input. The script user's response is stored in the response_variable for later access as
$response_variable. The read command accepts the user's input and stores it in the variable.

                  echo command 
                  
The -e option enables the interpretation of backslash escapes
The \c option will stop output from echo command.
  echo -e Hello World \c >> hi.txt

                  Environment Variables in Scripts
                  
Environment variables are assigned and accessed just like other shell script variables. The difference is that the script or command
that sets an environment variable uses the export command. Suppose you set an environment variable in Script-A and Script-A starts 
Script-B in a manner that creates a subshell. Script-B can use the environment variable too.
Remember, most environment variable names are all uppercase, whereas non-environment shell script variables should all be lowercase 
or mixed case.

                                                      Conditional Expressions
                                                      
Scripting languages support several types of conditional expressions. These expressions enable a script to perform one of several
actions contingent upon some condition-typically the value of a variable.

                  if-then

One common command that uses conditional expressions is the if-then statement. fi to designate the end of the statement.
##################################
  if [condition]
  then
    [command]
  fi
##################################

                if-then-else
                
You can also add an else section to your if-then statement   
##################################
  if [condition]
  then
    [command]
  else
    [command]
  fi
##################################  
  
                test command
                
This basic if-then-else statement syntax has limited use. Where it really becomes valuable is when you can test a variable's value.
The test command:
  test [condition]
If the condition (condition) listed in the test command evaluates to true, the test command exits with a zero status code. If the
condition evaluates to false, the test command exits with a nonzero status code.
  test == if-then-else
Both the test condition and test command can evaluate three condition types:
  1: Numeric comparisons
  2: String comparisons and tests
  3: File comparisons and tests
  
To test if two numbers are equal, the number comparison users the -eq comparison syntax. To test if two strings are equivalent,
the string comparison use the = comparison syntax.
For varibales that will be used to store integers, you should use the declare command as follows: declare -i [variable]
You can also test a variable's contents without a comparison. 
  For example: 
To test if a string has a length of zero, use the -z syntax. 
To test if a file exits, use the -f syntax.
  
The [ condition ] must have a space after the first bracket [ and before the closing brecket ].
Test conditions may be combined with the logical "and" (&&) or logical "or" (||) operatiors. 
When conditionals are combined with &&, both sides of the operator must be true for the conditon as a whole to be true. 
When || is used, if either side of the operator is true, the condition as a while is true.

                nested if

If a variable can have two or more values, you can use nested if statements to test for these conditions.
Instead of an else keyword, the elif (else if) keyword is used.
##################################
  if [ condition1 ]
  then
    [command]
  elif [ condtion2 ]
    [command]
  fi
##################################

                case
                
For a case statement, [word] is likely to be a variable and each instance of pattern is a possible value of that variable. The patterns
can be expanded much like filenames, using the same wildcards and expansion rules (* to stand for any string). You can match an arbitrary
number of patterns in this way. Each set of commands must end with a double semicolon (;;), and the case statement as a whole ends in 
the string esac (case backwards).
Upon execution, bash executes the commands associated with the first pattern to match the variable's contents. Execution then jumps to 
the line following the esac statement; any intervening commands don't execute. If no patterns match the word, no code within the case 
statement executes.
##################################
  case [word] in
    pattern1)
      [command];;
    pattern2)
      [command];;
    ....
  esac
##################################  




                      Loops
              
Conditional expressions are sometimes used in loops. Loops are structures that tell the script to perform the same task repeatedly
until some condition is met (or until some condition is no longer met).
There are three primary loop types that you can use in a shell script. Two of the loop types are based on a test condition, while the
other loop type executes its task(s) for a certain number of list items.
  - While condition tests true
  - Until condition tests true
  - For items in list
  
            While Loop

The while loop's commmands execute while its test condition returns a true.
You can use double brackets to enclose a test condition [[ condition ]] that might test an empty variable.  
##################################
  while [ condition ]
  do
    [commands]
  done
##################################

          Until Loop
          
An until loop takes a slightly different approach. An until loop's command execute until its test conditon return a true.
##################################
  until [ condition ]
  do
    [commands]
  done
##################################

          For Loop
          
A for loop is rather different in its operation compared to while and until loops. The for loop does not test any conditions, but 
instead executes its commands for a certain number of list items. When the for loop starts, variable (variable) is assigned the 
first item in the list's (list) value. The commands in the do/done construct are executed on time. The variable is then assigned the
second list item's value, and the commands in the do/done construct are executed one time again. This continues until each list item's 
value has been assigned to the variable.
##################################
  for variable in list
  do
    commands
  done
##################################  



          Shift command
          
The shift command removes the value of the $1 parameter, moves the $2 parameter's value into $1, moves the $3 parameter's value into $2,
and so on. When shift has passed the last parameter, the $1 variable becomes null.
Shift move over the value of each parameter after a run of the command.

./adduser voth adam john bob

##################################
!#/bin/bash
Username=$1
until [ "Username" = "" ]
do
......
  shift
  Username=$1
done
##################################
          
          seq command
          
The seq command is another handy command to use with the for loop. It's great if youneed a large amount of numbers in your list.
  seq [BeginningNumber] [IncrementAmount] [EndingNumber]
  seq 10 does 1-10 with increment of 1
  seq 2 10 does 2-10 with increment of 1
  seq 2 2 10 does 2-10 with increment of 2 (2,4,6,8,10)

          list
          
You can chain together commands using various list operators. This is called a list or a list of commands. 
You can use the following operator.
  Semicolon ;
  Ampersand &
  Double ampersand &&
  Double vertical line or pipe ||
  
The semicolon (;) operator allows you to list two or more commands on the same command line.
You can have your commands run almost simultaneously by using the ampersand (&) operator. Any command with an ampersand listed after
it is sent to the background to execute. Commands without ampersands are run in the foreground.
With the double ampersand (&&), the second command is executed only if the first command completes successfully.
With the double pipe (||) operator, the second command will be executed only if the first command does not execute successfully.
You can add the break command after a (||) pipe command to terminate the list.

          function
          
A function is a part of a sscript that performs a specific subtask and can be called by name from other parts of the script. Functions
are defined by placing a set of parentheses () after the function name and enclosing the lines that makes up the function within curly
braces {}:
Functions aren't run directly and in the order in which they appear in the script. 
They're run only when called in the main body of the script
#################################
  function_name() {
    commands
    }
#################################




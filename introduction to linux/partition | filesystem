                          Partition
        Why Partition?
  Multiple-OS support: partitioning enables you to keep the data for different OSs separate.
  Filesystem Choice: By partitioning your disk, you can use different filesystems-data structures designed to hold all of the files on a partition.
  Disk Space Management: By partitioning your disk, you can lock certain sets of files into a fixed space.
  Disk Error Protection: If data structures on one partition become corrupted, the errors affect only the files on that partition.
This separation can therefore protect data on other partitions and simplify data recovery.
  Security: You can use different security-related mount options on different partitions.
  Backup: Keeping partitions small you may be able to back up more easily.
  
        Understanding Partitioning System
Partitions are defined by data structures that are written to specified parts of the hard disk. Master Boot Record (MBR) partitioning
system, so called because it stores its data in the first sector of the disk. MBR is limited to partitions and partition placement of 
2 tebibytes. The successor to MBR is the GUID Partition Table (GPT) partitioning system.

        MBR Partition
Allowed for only 4 partitions
  Primary partitions: which are the same as the original partition types
  Extended partitions: which are a special type of primary partition that serve as placeholders for the next type.
  Logical partitions: which reside within an extended parttion
  ___________________________________  ___________________________________   ___________________________________
  |                                  | | 2nd Primary / Extended Partition |  |                                  |
  |      First Primary Partition     | |        1st Logial Partition      |  |      Third Primary Partition     |
  |__________________________________| |________2nd_Logial_Partition______|  |__________________________________|

The primary partitions have nubers in the range of 1-4, whereas lovial partitions are numbered 5 and up.
You can backup your MBR partitions by typing:
        sfdisk -d /dev/sd[x] > sd[x]-backup.txt
You can then copy the backup file to a removable disk or another computer for safekeeping.
You can restore the backup by typing:
        sfdisk -f /dev/sd[x] < sd[x]-backup.txt
MBR partitions have type codes, which are 1-byte (two-digit hexadecimal) numbers:
  FAT:  0x0c
  ext:  0x05
  NTFS: 0x07
  swap: 0x82
  Linux file system: 0x83
  
        GPT Partition : GUID Partition Table
GPT is the preferred partitioning system for disks bigger than 2TiB. Most EFI-based computers use GPT.
GPT employs a protective MBR, which is a legal MBR definition that makes GPT-unaware utilities think that the disk holds a single MBR 
partition that spans the entire disk. Data structures are duplicated, with one copy at the start of the disk and another at the end.
This provides redundancy that can help in data recovery should an accident damage one of the two sets of data structures.
You can define up to 128 partitions by default
    *fdisk utility doesn't work with GPT disks
    **GPT does not imploy primary/extended/logical distinction of MBR
    
        LVM : logical volume management
An alternative to partitions for some functions is logical volume management LVM. To use LVM, you set aside one or more partitions and
assign them MBR partition type codes. You then use a series of utilities, such as 'pvcreate', 'vgcreate', 'lvcreate', and 'lvscan', 
to manage the partitions (known as physical volumes in this scheme), to merge them into volume groups, and create and manage logical
volume within the volume groups. You can access the logical volumes using names you assigned them in the /dev/mapper directory, such
as /dev/mapper/myvol-home. The biggest advantage to LVM is that it enables you to resize your logical volumes easily without worrying
about the positions or sizes of surrounding partitions.

        Common Partitions and Filesystem Layouts
        
Partition               Typical
Mount point             Size                        Use

Swap (not mounted)   One to two times the        -Serves as an adjunct to system RAM. It is slow but enables the computer to run
                     system RAM size              more or larger programs.
/home                200MiB-3TiB or more         -Holds users' data files. Isolating it on a separate partition preserves user data
                                                  during system upgrade. Size depends on the number of users and their data storage needs.
/boot                100-500MiB                  -Holds critical boot files. Creating it as a separate partition lets you circumvent
                                                  limitations of older BIOSs and boot loaders, which often can't boot a kernel from a
                                                  point above a value between 504MiB and 2TiB.
/usr                 500MiB-25GiB                -Holds most linux program and data files; this is sometimes the largest partition,
                                                  although /home is larger on systems with many users or if users store large data file.
                                                  Changes implemented in 2012 are making it harder to create a separate /usr partition.
/usr/local           100MiB-3GiB                 -Holds linux program and data files that are unique to this installation, particularly 
                                                  those that you compile yourself.
/opt                 100MiB-5GiB                 -Holds Linux program and data files that are associated with third-party packages,
                                                  especially commercial ones.
/var                 100MiB-3TiB or more         -Holds miscellaneous files associated with the day-to-day functioning of a computer.
                                                  These files are often transient in the nature. Most often split off as a separate partition
                                                  when the  system functions as a server that user the /var directory for server-related files.
/tmp                 100Mib-20GiB                -Holds temporary files created by ordinary users.
/mnt                 N/A                         -Not a separate partition; rather, it or its subdirectories are used as mount points
                                                  for removable media like CDs and DVDs.
/media               N/A                         -Holds subdirectories that may be used as mount points for removable media, 
                                                  much like /mnt or its subdirecoties.                                                
                                                 
*Some directories - /etc /bin /sbin /lib /dev should NEVER be placed on separate partitions. These directories host critical system
configuration files or files without which a Linux system cannot function.

                         Partitioning a Disk
          fdisk
The traditional Linux tool for MBR disk partitioning is called 'fdisk'. This tool's name is short for fixed disk.
To use 'fdisk', type the command name followed by the name of the disk device.
              fdisk /dev/sd[x]
Which will take you to fdisk utility for that give disk device
Using these option below will bring up prompts:
  Display the Current Partition Table: p or fdisk -l /dev/sd[x] (at command prompt rather than enter fdisk's interactive mode)
  Create a Partition: n
A series of prompts asking for information like: primary, extended or logical. Partition's starting clinder; the partition's ending cylinder 
or size. Older versions of 'fdisk' measure partition start and end points in cylinders, not megabytes. Recent versions of 'fdisk' use sectors
as the default unit of measure, although you can specify a partition's size by using a plus sign, number, and suffix +20G create 20GiB partition.
  Delete a Partition: d
If more than one partition exists, the program will ask for the partition number.
  Change a Partition's type: t
'fdisk' will assign 0x83 type code which corresponds to Linux filesystem. I you want to create a Linux swap partition or any other OS
partition, type t and a prompt will ask you for the partition type code.
  List Partition Types: l
Type l at the main 'fdisk' prompt to list partition type
Type L at the change partition prompt to list partition type
  Mark a Partition Bootable: a
Some OSs, such as Windows, rely on their partitions having special bootable flags in order to boot. Type a, whereupon 'fdisk' asks
for the partition number.
  Get Help: m or ?
  Exit: q without saving or w write change and quit
  
        gdisk  
If you're working with a GPT-formatted hard drive, you'll need to use the 'gdisk' utility.
              gdisk /dev/sd[x]
It works exactly like the 'fdisk' utility.
*Remember that the GPT format doesn't use primary, extended, or logical partitions-all of the partitions are the same.

        GNU Parted
GNU Parted is a partitioning tool that works with MBR, GPT, APM, and BSD, and other disk types.
              parted /dev/sd[x]
                        or
              parted        # entering the utility
              select        # select disk device
print : display information
mklabel gpt : create a GPT disk
mkpart primary ext4 1024k 2tb : create new partition as primary and file system type ext4

Once a partition is created, you must prepare it for use. This process is often called "making a filesystem" or "formatting a partition".
Low-level formatting, which creates a structure of sectors and tracks on the disk media, or High-level formatting, which creates a filesystem.
Hard disks are low-level formatted at the factory and should never need to be low-level formatted again.

                    Filesystem Types
ext2 or ext2fs: The second extended file system                    
  Has a reputation as a reliable filesystem, a good choice for a small /boot parttition, non-journaling (log files)
ext3 or ext3fs: The third extended file system
  Basically ext2 with journal added
ext4 or ext4fs: The fourth extended file system
  Ability to work with very large disks >16TiB and very large file >2TiB
ReiserFS
  Designed from scratch as a journaling filesystem. Good at handling large number of small files. Uses various tricks to squeeze the end
  of files into each other's unused space.
JFS: Journaled File System
  IBM developed. For AIX OS on mainframe systems and workstation OS, called OS/2. After the demise of OS/2, JFS was donated to Linux.
  Sophisticated journaling filesystem.
XFS: Extents File System
  Created by Silicon Graphics (SGI). Robustness, speed, and flexibility.
Btrfs: 
  Fast performer, and it is able to handle very large disk and file.
FAT: File Allocation Table
  Limited to 8 character with an optional 3 character extension (8.3 filename) 
  Can not transfer file over 4GiB
NTFS: New Technology File System
  Preferred filesystem for Windows. NTFS-3G driver is the default for Linux distro to read NTFS files.
HFS and HFS+: Hierarchical File System
  Apple's filesystem.
ISO-9660:*
  Standard filesystem for CD-ROMs
UDF: Universal Disc Format
  Used on DVD-ROMs

*mkisofs creates an ISO-9660 filesystem
*cdrecord writes this image to a blank CD-R
*growisofs program combines both function but works only on recordable DVD media

          Creating a Filesystem
These tools have filenames in the form of 'mkfs.fstype', where fstype is the filesystem type code.
A front-end tool called 'mkfs'
For ext2 and ext3 filesystems, the mke2fs program is often used instead of mkfs.
mke2fs = mkfs.ext2

        mkfs
-t : pass the filesystem type code
-c : perform bad-block check-every sector in the partition is checked to be sure it can reliably hold data.
-m : sets the reserved-space percentage. The idea is that you don't want the disk to fill up completely with user files;
     if the disk start getting close to full, Linux should report that the disk is full before it really is.
     ext2-4 reserved-space percentage defaults to 5 percent.
        mkdosfs
mkfs.msdos & mkfs.vfat = mkdosfs
Automatically adjust the size of the FAT data structure to 12, 16, or 32 bits depending on the device size.
You can override this option with the -F fat-size option, where fat-size is the FAT size in bits - 12, 16, 32

      Creating Swap Space
Some partitions don't hold files. Most notably, Linux can use a swap partition, which is a partition that Linux treats as
an extension of memory. Linux can use swap file as the same way as swap partition.
Although swap space doesn't hold a filesystem per se, and it isn't mounted in the way that filesystem partitions are mounted.
  Creating swap partition:
          mkswap /dev/sd[x]
  Activate swap partition:
          swapon /dev/sd[x]
          
*Filesystem maintenance tools should be run when the filesystem is NOT mounted. Changes made by maintenance utilities while
the filesystem is mounted can confuse the kernel's filesystem drivers, resulting in data corruption.

      Tuning Filesystem
Some filesystem include tools that enable you to set filesystem options that affect performance.
Three tools are particularly important for tuning these filesystems:
  dumpe2fs
  tune2fs
  debugfs
The first of these tools provides information about the filesystem, and the other two enable you to change tuning option.

    Obtaining Filesystem Information
    dumpe2fs /dev/sd[x]
You can learn a lot about your ext2 or ext3 filesystem with the dumpe2fs command.
-h : cause the utility to omit information about group descriptors.
inode: each inode contains information for one file, so the number of inodes effectively limits the number of files you can store.
You could retrieve information about how your filesystem are currently configured using dumpe2fs.

xfs filesystem uses xfs_info
    xfs_info /home
Unlike dumpe2fs where you list the partition name/device name, you pass the mount point.
Require filesystem to be mounted, unlike dumpe2fs.
    xfs_metadump
This program copies the filesystem's metadata to a file.
    xfs_metadump /dev/sda7 /home/hpcd/voth/dump_file.data

                  Adjusting Tunable filesystem Parameters
The 'tune2fs' program enables you to change many of the filesystem parameters that are reported by 'dumpe2fs'.
            tune2fs [option] [device]
    Adjust the Maximum Mount Count:          
Ext2-4 require a periodic disk check with 'fsck'. This check is designed to prevent errors from creeping onto the disk undetected.
You can adjust the maximum number of times the disk may be mounted without a check with the '-c mounts' option, 
where mounts is the number of mount. You can trick the system into thinking the filesystem has been mounted a certain number of times
with the '-C mounts' option; this sets the mount counter to 'mounts'.
    Adjust the Time between Checks:
Periodic disk checks are required based on time as well as the number of mounts. You can set the time between checks with the 
'-i interval' option, where 'interval' is the maximum time between checks. 'Interval' is a number with the character d, w, or m
appended, to specify days, weeks, or months. respectively.
    Add a Journal:
The '-j' option adds a journal to the filesystem. converting an ext2 filesystem into an ext3 filesystem.
    Set the Reserved Blocks:
The '-m percent' option sets the percentage of disk space that's reserved for use by root. The default value is 5.
You can also set the reserved space in blocks, rather than as a percentage of disk space, with the '-r blocks' option.

*As with most low-level disk utilities, you shouldn't use 'tune2fs' to adjust a mounted filesystem.
   
XFS, the xfs_admin command is the rough equivalent of 'tune2fs'
            xfs_admin [option] [device]      
    Use Version 2 Journal Format:
The -j option enables version 2 log (journal) format, which can improve performance in some situations.
    Obtain the filesystem Label and UUID:
You can use the -l and -u options to obtain the filesystem's label (name) and universally unique identifier (UUID)
    Set the filesystem label and UUID:
You can change the filesystem's label or UUID by using the '-L label' or '-U uuid' option.
You can use 'generate' as the uuid value to have xfs_admin create a new UUID.
xfs_admin should be used only on unmounted filesystem.

                    interactively modify a filesystem's features
            debugfs [device]
    Display Filesystem Superblock Information:
The 'show_super_stats' or 'stats' command produces superblock information, similar to what dumpe2fs displays.    
    Display Inode Information:
You can display the inode data on a file or directory by typing 'stat filename', where filename is the name of the file.
    Undelete a file:
You can use debugfs to undelete a file by typing 'undelete inode name', where inode is the inode number of the deleted file and name is
the filename you want to give to it. (You can use 'undel' in place of undelete if you like.) You can obtain a list of deleted inodes by
typing 'lsdel' or 'list_deleted_inodes'.
    Extract a File:
You can extract a file from the filesystem by typing write 'internal-file external-file', where internal-file is the name of a file 
in the filesystem that you're manipulating and external-files is a filename on your main linux system.

*debugfs Don't use it on mounted filesystem

The closest xfs equivalent to 'debugfs' is called 'xfs_db'

                    Maintaining a Journal
After a power failure, a system crash, or another uncontrolled shutdown, the filesystem could be in an inconsistent state. The only way
to mount the filesystem safely so that you're sure its data structures are valid is to perform a full disk check on it.
This task is usually handled automatically when the system boots, but it takes time.
The solution to this problem is to change to a 'journaling filesystem'. Such a filesystem maintains a journal, which is a data structure
that describes pending operations. Prior to writing data to the disk's main data structures, Linux describes what it's about to do in
the journal. When the operations are complete, their entries are removed from the journal.
In the event of a crash or power failure, the system can examine the journal and check only those data structures described within it.
If inconsistencies are found, the system can roll back or complete the changes, returning the disk to a consistent state without
checking every data structure in the filesystem.
You can set these with the '-J' option to tune2fs. In particular, the 'size=journal-size' and 'device=external-journal' suboptions
enable you to set the journal's size and the device on which it's stored. By default, the sytem creates a journal that's the right 
size for the filesystem and stores it on the filesystem itself.

                  Checking Filesystems
Tuning a filesystem is a task that you're likely to perform every once in a while-say, when making major changes to an installation.
Another task is much more common: checking a filesystem for errors. Bugs, power failures, and mechanical problems can all cause the 
data structures on a filesystem to become corrupted.
The main tool that you'll use for this purpose is called 'fsck'.
  e2fsck == fsck.ext2 | fsck.ext3 | fsck.ext4
  xfs_check and xfs_repair
  
  Check All Files:
-A option cause 'fsck' to check all of the filesystems marked to be checked in /etc/fstab.
  Indicate Progress:
-C option displays a text-mode progress indicator of the check process.
  Show Verbose Output:
-V option produces verbose output of the check process.
  No Action:
-N option tells 'fsck' to display what it would normally do without actually doing it.
  Set the Filesystem Type:
Normally, 'fsck' determines the filesystem type automatically. You can force the type with the '-t fstype' flag. Used in conjunction
with -A, this causes the program to check only the specified filesystem types. If 'fstype' is prefixed with 'no', then all filesystems 
except the specified type are check.
  Filesystem-Specific Option:
The 'fsck' command passes options it doesn't understand, or those that follow a double dash (--), to the underlying check program.
-a or -p perform an automatic check
-r perform an interactive check
-f force a full filesystem check even if the filesystem initially appears to be clean
 
  


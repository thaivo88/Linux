                        Converting between package formats:

The alien program can convert between RPM packages, Debian packages, and tarballs.
alien requires that you have appropriate package manager software installed, both PRM and Debian, to convert between these format.
When converting from a tarball, alien copies the files directly as they had been in the tarball, so alien works only if the original tarball
has files that should be installed off the root (/) direcotry of the system.
                alien [options] [file]
--to-deb : convert to debian
--to-rpm : convert to RPM
--to-tgz : convert to tarball
If you omit the destination format, alien assumes that you want debian package.
If you use a Debian-based system and want to install a tarball but keep a record of the files it contains in your Debian package database:
                alien --install binary-tarball.tar.gz

Say if a tarball was unpacked with bin, lib, sbin but your intent maybe to unpack into /usr or /usr/local
to do so you need to unpack the tarball file and move the file into a new directory called usr then tar the file.
    tar xvfz program.tar.gz         :       uncompress file
    mv program-files usr            :       move all file into a new usr directory
    tar cvfz program.tgz usr        :       compress the usr directory as program.tgz
    rm -r usr                       :       remove usr directory and subdirectory
    alien --to-rpm program.tgz      :       convert tarball into RPM
    


                        Real and imagined package dependency problems

Missing libraries or support programs
One of the most common dependency problems is caused by a missing support package.
Libraries-support code that can be used by many different programs as if it were part of the program itself.

Incompatible libraries or support programs
Even if a library or support program is installed on your system, it may be the wrong version.
Linux library-naming conventions enable you to install multiple versions of a library in case you have programs with competing requirement.

Duplicate files of features
Conflicts arise when one package includes file that are already installed and that belong to another package.
Feature conflicts are usually accompanied by name conflicts.
Mixing packages intended for different distro; because distro may split files across package in different ways.

Mismatched names
RPM and Debian package management systems give names to their packages. These names don't always match across distributions.



                        Workarounds for package dependency problems
            
Forcing the installation, modifying your system to meet the dependency, rebuilding the problem package from source code, and 
finding another version of the problem package.

Forcing the installation:
One approach is to ignore the issue
ignore failed dependencies
        rpm -i apackage.rpm --nodeps
        dpkg -i --ignore-depends=[package]
force installing
        rpm -i apackage.rpm --force
        dpkg -i --force-depends
        dpkg -i --force-conflicts
        
        
        
                        Rebuild package
If the software is recompiled on a system that has different packages, the dependencies will change. Therefore, rebuilding a package
from source code can overcome at least some dependencies. Rebuild a RPM package: you call rpmbuild with the name of the source package
and use --rebuild
        rpmbuild --rebuild packagename-version.src.rpm
Of course, to do this you must have the source RPM for the package.
                                              
                                              
################ Library ################
                                              
                        Library Principle
If programs use their own libraries we run into these main issue: (Libraries are share due to:)
            -program file is huge; takes up a lot of disk space and consumes a lot of RAM when loading
            -multiple programs use the library, the program-size issue is multiplied; disk space and RAM
            
Shared libraries usually have a .so or .so.[version] extension (like dynamic link libraries .DLL in window)
Static libraries have .a filename extensions. (used by linkers for inclusion in programs when dynamic libraries aren't to be used.)
Shared library changes can be incompatible with some or all programs that use the library. Linux uses library-numbering schemes to 
enable you to keep multiple versions of a library installed at once.                       
                        
                      Setting the Path system wide
set the library path : edit the /etc/ld.so.config file
This file consists of a series of lines, each of which lists one directory in which shared library files may be found.

Some distribution use the env-update utility that reads files in /etc/env.d to create the final porm of several /etc configuration files,
including /etc/ld.so.conf.
To change ld.so.conf in distributions that uses this mechanism, you should add or edit files in etc/env.d then type env-update.
Linux refers to the trusted library directories, /lib and /usr/lib. These directories are always on the library path, even if they aren't
listed in ld.so.conf.

After you change your library path, you must use ldconfig to have your programs use the new path.

                      Correcting library problem:
If you get an error loading shared libraries, make sure it is installed if not install the library.
If the library is installed but the name is different you might want to create a symbolic link.
    example: program may link to biglib.so.5 but your system has biglib.so.5.2 creating a symbolic link will fix this issue.
You may beed to add its directory globally or to LD_LIBRARY_PATH.

                      Library Management Commands
Linux provides a pair of commands that you're likely to use for library management:
    ldd : displays a program's shared library dependencies-that is, the shared liraries that a program uses.
    ldconfig :  updates caches and links used by the system for locating libraries, it reads /etc/ld.so.conf and implements
any changes in that file or in the directories to which it refers.

If you run into a program that won't launch because of missing libraries, the first step is to check which libraries the program file uses.
      example: ldd /bin/ls
If the library name doesn't contain a complete path, ldd attempts to find the true library and displays the complete path following the => symbol.
The -v option provide a long list of version information following the main entry. May be helpful to track down which version of a 
library a program is using, in case you have multiple versions installed.
Library can themselves depend on other libraries, thus you can use ldd to discover what libraries are used by a library.

                      Rebuilding the library cache
  ldconfig
The ld.so and ld-linux.so programs, which manage the loading of libraries, doesn't read /etc/ld.so.conf every time a program runs.
Instead, the system relies on a cached list of directories and the files they contain stored in binary format in /etc/ld.so.cache.
The drawback is that you must rebuild that cache every time you add or remove libraries.

        ldconfig
  Display Verbose Information: -v
Causes the program to summarize the directories and files it's registering as it goes about its business.
  Don't Rebuild the Cache: -N
Causes ldconfig not to perform its primary duty of updating the library cache. It will update symbolic links to libraries, 
which is the sceondary duty of this program.
  Process Only Specified Directories: -n
Causes ldconfig to update the links contained in the directories specifed on the command line.
The system won't examine the directories specified in the /etc/ld.so.conf or the trusted directories /lib and /usr/lib.
  Don't Update Links: -X
Opposite of -N; it causes ldconfig to update the cache but not manage links.
  Use a new configuration file: -f [file]
You can change the configuration file from /etc/ld.so.conf
  Use a new cache file: -C [file]
You can change the cache file that ldconfig create
  Use a new root: -r [dir]
Cause ldconfig to treat [dir] as if it were the root (/) directory. This option is helpful when you're recovering a badly corrupted system.
  Display current information: -p
Causes ldconfig to display the current cache-all of the librarydirectories and the libraries they contain.

ldconfig run automatically after installing or removing the package. The same thing happens as part of the installation process.

                              Managing Processes
                  Understanding the Kernel: The First Process
        uname [option]                
  Node Name: -n or --nodename
displays the system's node name; that is, its network hostname
  Kernel Name: -s or --kernel-name
displays the kernel name, which is Linux on a linux system
  Kernel Version: -v or --kernel-version
holds the kernel build date and time, not the actual version number.
  Kernel Release: -r or --kernel-release
kernel version number
  Machine: -m or --machine
returns information about your machine; cpu arch
  Processor: -p or --processor
return information about your CPU (manufacturer, model, and clock speed)
  Hardware Platform: -i or --hardware-platform
hardware information; often return 'unknown'
  OS Name: -o or --operating-system
return OS name-normally GNU/LINUX
  Print All Information: -a or --all
returns all available information

            Examining Process Lists
      ps (processes's status): monitoring what's happening on a system.
ps supports three different types of options as well as many options within each type:
  1) Unix98 Options: These single-character options may be grouped together and are preceded by a single dash (-).
  2) BSD Options: These single-character options may be grouped together and must not be preceded by a dash.
  3) GNU Long Option: These multi-character options are never grouped together. They're preceded by two dashes (--).




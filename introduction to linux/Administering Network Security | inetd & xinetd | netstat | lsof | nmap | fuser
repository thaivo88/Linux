Using Super Server Restrictions

Many network server programs directly open network ports and listen for connections. Some distributions have network server programs that
work through an intermediary: a super server or super daemon. This is a program that listens for network connections on behalf of another
program. When a connection is initiated, the super server hands off control of that connection to the intended server.
Linux has two primary super daemon:
  1:  inetd
  2:  xinetd
  
In the case of inetd, security is handled by a package called TCP wrappers.
xinetd's security features are built into xinetd itself.

Use both a server's own security features and the super daemon's security features to block unwanted access. If a problem emerges in the 
super server configuration, the secondary block will probably halt the attacker.

Configuring/setting up inetd

The inetd package is a legacy super daemon in Linux.
Services that launched via inetd were controlled through the /etc/inetd.conf file or files in /etc/inetd.d/. The /etc/inetd.conf file 
consisted of a series of lines, one for each server.
A typical line for /etc/inetd.conf:
  ftp stream tcp nowait root /usr/sbin/tcpd /usr/sbin/in.ftpd -l
  
Instead of using a single monolithic /etc/inetd.conf file, later versions of inetd enabled you to split the configuration into several 
files in the /etc/inetd.d/ directory. Doing so allowed easier addition or deletion of server configurations by adding or deleting their
configuration files.

Service Name
  The first field (ftp) was the name of the service as it appeared in the /etc/services file
Socket Type
  The socket type entry told the system what type of connection to expect-a reliable two-way connection (stream), 
  a less reliable connection with less overhead (dgram), 
  a low-level connection to the network (raw), 
  or various other.
Protocal
  This was the TCP/IP transport layer protocol used, usually tcp or udp.
Wait/No Wait
  For dgram socket types, this entry specified whether the server connected to its client and freed the socket (nowait) or processed all
  of its packets and then timed out (wait). Servers that used other socket types would specify nowait in this field.
User
  This was the username used to run the server. The root and nobody users were common choices, but others were possible as well. As a
  general rule, servers were run with a low-privilege user whenever possible as a security precaution. Some servers required root access.
Server Name
  This was the server's filename. In the preceding example, the server is specified as /usr/sbin/tcpd, which is the TCP wrappers binary.
  This program was an important security tool and was usually included as the means of launching programs via inetd.
Parameters
  Everything after the server name consisted of parameters that were passed to the server. If you used TCP wrappers, you would pass the
  name of the true target server (/usr/sbin/in.ftpd) in this field, along with its parameters.
  
After modifying inetd.conf, you had to restart the inetd super daemon.
  /etc/init.d/inetd restart
  
Controlling Access via TCP Wrappers

The TCP wrappers package  provides a library known as libwrap. Older TCP wrappers packages used with inetd provided a program known as 
tcpd. The inetd did not call a server directly; instead, inetd called tcpd, which did two things: It checked whether a client was
authorized to access the server, and if the client had this authorization, tcpd called the server progarm.

The FTP server, vsftpd, uses TCP wrapper. You can determine if a network service uses TCP wrappers or not by typing
  Idd NetworkServiceDaemon | grep libwrap
  
TCP wrappers is configured through two files: /etc/hosts.allow and /etc/hosts.deny. The first of thes specifies computers that allowed 
access to the service. Systems not listed in hosts.allow are not permitted access. By contast, hosts.deny lists computers that are not 
allowed access; all other systems are granted access to the service. If a computer is listed in both files, hosts.allow takes precedence.
Both files use the same basic format.
The file consists of lines in the followig form:
  daemon-list : client-list

The daemon-list variable is a list of servers using the names for the servers that appear in /etc/services. Wildcards are also available,
such as ALL for all servers.
The client-list variable is a list of computers to be granted or denied access to the specified daemons. You can specify computers by 
name or by IP address. Also, you can specify a network by using a leading or tailing dot (.) when identifying networks by name or IP 
address block. For instance, .ivytech.edu refers to all computers in the ivytech.edu domain, and 192.168.7. refers to all computers in 
the 192.168.7.9/24 network. You can also use various wildcard options in the client-list variable, such as ALL (all computers).
The EXCEPT operator creates an execption. The following client-list setting is placed in the hsots.deny file:
  [...]: 192.168.7. EXCEPT 192.168.7.105
Client-list setting would block all computers in the 192.168.7.0/24 network. However, an exception would be made for 192.168.7.105

Configuring xinetd

The xinetd program is an extended super daemon. It provides the functionality of the legacy inetd, plus security options that are
similar to those of TCP wrappers.

The /etc/xinetd.conf file controls the xinetd super daemon.

xinetd configuration file example:
#################################
# default: off
[...]
service rsync
{
  disable = yes
  flags            = IPv6
  socket_type      = stream
  wait             = no
  user             = root
  server           = /usr/bin/rsync
  server_args      = --daemon
  log_on_failure   += USERID
}
$
##################################

If you include the line disable = yes in a service definition, xinetd ignores this sserver. You must edit the file and change the 
entry to read disable = no to enable the server. You can also temporarily disable a set of servers by listing their names in the 
defaults section of the main xinetd.conf on a line called disable. After you make changes to xinetd's configuration, you must 
either reload the configuration file or restart the super server.
  /etc/init.d/xinetd restart
  
Controlling access via xinetd

Security is handled on a server-by-server basis through the use of configuration parameters in either /etc/xinetd.conf or the 
server-specific configuration files.
  hosts.allow and hosts.deny
  
    Network Interface:
The bind option tells xinetd to listen on only one network interface for the service. For instance, you can specify bind = 192.168.23.7
on a router to have it listen only on the Ethernet card associated with that address. This feature is extremely useful in routers, but
it isn't as useful in computers with just one network interface. You can, however, use this option to bind a server only to the loopback 
interface, 127.0.0.1, if a server should be available only locally. You might do this with a configuration tool like the Samba Web 
Administration Tool (SWAT). A synonym for this option is interface.
    Allowed IP or Network Addresses:
You can use the only_from option to specify IP addresses, networks, or computer names on this line, separated by spaces. The result is 
that xinetd will accept connections only from these addresses, similar to TCP wrappers' hosts.allow entries.
    Disallowed IP or Network Addresses:
The no_access option is the opposite of only_from; you list computers or networks here that you want to blacklist. This is similar to 
the hosts.deny file of TCP wrappers.
    Access Times:
The access_times option sets times during which users may access the server. The time range is specified in the form hour:min-hour:min,
using a 24-hour clock. Note that this option affects only the times during which the server will respond. If the xinetd access_times 
option is set to 8:00-17:00 and somebody logs in at 4:59 p.m. (one minute before the end time), that user may continue using the 
system well beyond the 5:00 p.m. cutoff time.

You should enter these options into the configuration files in /etc/xintd.d/ that correspond to the servers you want to protect. Place
the lines between the opening brace ({) and closing brace (}) for the service. If you want to restrict all of your xinetd-controlled
servers, you can place the entries in the defaults section in /etc/xinetd.conf.

Disabling unused servers

For security reasons, you should periodically audit your servers' network services and disable any service that you find isn't necessary.
Several audit tools exist, such as netstat, lsof, and remote network scanners.

Netstat

Auditing network scurity is to look for network activity or open ports on a computer. One older tool that can help in this respect is 
netstat. This useful program provides many different options and output formats to deliver information about routing tables, interface
statistics, and so on.

For spotting unnecessary servers, you can use netstat with its -a and -p options. The -a option shows all network sockets. The -p option
shows the PID and program name that owns a shown socket.

The netstat command with the -ap options shows active network sockets that can reveal the presence of servers that are running on your
computer. The Local Address and Foreign Address columns specify the local and remote addresses, including both the hostname or IP address
and the port number or associated name from /etc/services. Entries that are not actively connected will show the local address and the 
foreign address as asterisks (*).

The State column specifies that the server is listening (LISTEN) for a connectionor that a connection is currently active (ESTABLISHED).
The final column in this output, under the PID/Program name heading, indicates the process ID (PID) and program name of the service 
using this port.

To spot servers listening for connections quickly, type netstat -lp rather than netstat -ap. The result will show all servers that are
listening for connections, omitting client connections and specific server instances that are already connected to clients.

lsof

The lsof program nominally lists open files. It can be used to identify what files are open in a directory, find who's accessing them,
and so on. The definition of a file used by lsof is broad because it includes network connections. Thus, you can use lsof to audit your
network prots. With the -i parameter, the lsof command will show you not only various services listening for connections, but also any 
current network connections to those services.

The NAME column takes the form *:service (LISTEN), where service is the service name or port number. 
You can restrict the output ofvlsof by including an address after the -i options. 
The address takes the following form:
  [46][protocol][@hostname|hostaddr][:service|port] 
The digit 4 or 6 that represents an IPv4 or IPv6 connection
Protocol, which is a protocol type (TCP or UDP)
Hostname or hostaddr, which is the computer hostname or IP address
Service, which is a service name from /etc/services
Port, which is the port number

Using Remote Network Scanners

Network scanners, such as Nmap, can scan for open ports on the local computer or on other computers. Nmap is a very easy to use utility 
for conducting security audits on your systems.

Many organizations have policies forbidding the use of network scanners except under specific conditions.

Nmap is capable of performing basic checks for open ports. To conduct this simple audit using the nmap utility, add the -sT parameters.
Your first scan should be done using the loopback address (127.0.0.1). This allows you to see what network services are being offered by
your system without any firewall settings interfering with the results.

The -sT opton allows you to scan for service using TCP. Some network services use UDP. To scan for these with nmap, use the -sU option.
  nmap -sU [ip_address]
Notice that superuser privileges are required to run a UDP scan, whereas they were not required for running a TCP scan.  

Another scanning tool called Nessus, which is built atop Nmap, provides a graphical user interface. It also offers a means of performing
automated and sophisticated tests. Nessus is a more sophisticated scanner in that it checks for known vulnerabilities. Nessus comes as 
separate client and server components; the client enables you to control the server, which does the actual work.

Using fuser

Another handy network port auditing tool is the fuser command. You can use this tool to determine the processes currently using a 
particular network port.
Simply add the -v option on the fuser command to see all of the processes' information in one straightforward command. 
  fuser [option] [port/[tcp|udp]]
  fuser -v 22/tcp
  
The ACCESS column, display indicates whether or not the process has a file open (f) or a file open for writing (F).
There is also another format of the fuser command to view network processes using a particular port. In the following example, the -n 
option is used. 
  fuser -nv tcp 22
  
Be aware that many startup scripts start entire subsystems that aren't directly network related. Thus, you'll probably see startup 
scripts that you don't recognize. You should not automatically disable these scripts because they may be necessary even if you don't
recognize the name. If in doubt, leave them in place until you can research the matter further.
Unlike system startup scripts, super servers launch network servers only, not non-network services. Therefore, you should take a more
aggressive approach to disabling entries that you don't recognize from your super server configuration than you do with system startup 
scripts.

Uninstalling or Reconfiguring servers

First, you can disable the server by changing its startup script configuration or, if it uses the system's super daemon, disabling it in
the daemon's configuration file. Change a server's startup script and/or the preceding sections on xinetd for details on how to disable
xinetd via its configuration files.
Second, you can completely uninstall the server using your distribution's package management tools or by other wise deleting its files.

 


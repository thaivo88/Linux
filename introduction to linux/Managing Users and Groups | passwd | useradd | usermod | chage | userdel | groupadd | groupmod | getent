        Users | Group Account

Linux accounts can also be accounts for system services called daemons. A daemon is typically a program that provides a particular service.
Daemon program runs continuously in the background waiting for an event to trigger it to perform some service. While a daemon does not log
into a linux system, it still needs an account.

Linux treats usernames in a case-sensitive way.

Groups are not accounts, however. Rather, groups help organize collections of accounts, largely as a security measure. Every file on a
linux system is associated with a specific user and a specific group. Various permissions can be assigned to members of a group.

Group membership is controlled through the /etc/group file. This file contains a list of groups and the members belonging to each group.
Each user has a default or primary group. The user's primary group is set in the user's configuration /etc/passwd record.

When users log onto a computer, their group membership is set to their primary group. When users create files of launch programs, those
files and running programs are associated with a single group-the current group membership.
The user must run the 'newgrp' command to switch current group memebership.
  newgrp docker
  newgrp users
*the default group is users, but you need their primary group as docker and you can switch back to users.*
Alternatively, users can change the group associated with an existing file by using the 'chgrp' or 'chown' command.

        Mapping UID and GID to User and Group

As mentioned earlier, linux defines users and groups by numbers, referred to as user IDs (UIDs) and group IDs (GIDs).
Linux distributions reserve at least the first 100 user and group IDs (0-99) for system use.
The most important of these is 0, which corresponds to root. (both the user and the group)
Accounts and groups that are associated with specific linux utilities and functions use succeeding low numbers. For instance, UID 2 and 
GID 2 may be the daemon account and group.
The first normal user account is usually assigned a UID of 500 or 1000.
When you remove an account, that account's ID number may be reused. Reusing an ID number can cause problems if you don't clear away the old 
user's files. In this case, the new user, with the reused ID number, will become the old user's files' owners, which can lead to confusion 
and security issue.
Account numbering limits are set in the /etc/login.defs. In particular, UID_MIN and UID_MAX define the minimum and maximum UID values for
ordinary user accounts.

UID/GID  |   
Number   | Uses
---------------------
0        | root uses
1-99     | system uses
500-1000 | normal uses *(Limit can be changed in /etc/login.defs)

It's possible to create multiple usernames that use the same UID or multiple group names that use the same GID. These are different
accounts or groups. They have different entries in /etc/passwd or /etc/group, so they can have different home directories, different
passwords, and so on. Because these users or groups share IDs with other users or groups, though, they're treated identically in
terms of file permissions. You should avoid creating multiple users or groups that share an ID.

Adding users can be accomplished through the 'useradd' utility.
  useradd [option] [username]
In its simplest form, you may type just useradd username, where username is the account name that you want to create. The rest of the
parameters are used to modify the default values for the system, which are stored in the file /etc/login.defs.

                                                useradd options:
  Comment:
The -c [comment] parameter passes the comment field fo rthe user. Use to store public information.
  Home Directory:
You specify the account's home directory with the -d home-dir parameter. 
  Account Expiration Date:
You set the date on which the account will be disabled, expressed in the form YYYY-MM-DD, with the -e expire-date option.
Alternative forms, such as MM-DD-YYYY
By default, no expiration date is set.
  Inactive Days:
An account becomes completely disabled a certain number of days after a password expires. The -f inactive-days parameter sets the
number of days. A value of -1 disables this feature, and it is the default.
  Default Group:
You set the name of GID of the user's default group with the -g default-group option.
  Additional Group:
The -G group[,...] parameter sets the names of GIDs of one or more groups to which the user belongs.
  Home Directory Options:
The /etc/login.defs file specifies whether or not to create a user's home directory when the account is created via the CREATE_HOME 
setting. If set to yes, the -m option has no effect. If set to no, the -m option toggles this specification and a user'shome directory
is created.
  No Home Directory Creation:
The -M option forces the system NOT to create a home directory, even if /etc/login.defs specifies that this action is the default. You
might use this option, often in conjunction with -u and -d, if a new account is for a user who's taking over the home directory of
an existing user.
  Hashed Password Specification:
The -p password parameter passes the pre-hashed password for the user to the system. The password value is added unchanged, to the
/etc/passwd or /etc/shadow file. This means that if you type an unhashed password, it won't work as you would probably expect. In
practice, this parameter is most useful in scripts, which can hash a password (using crypt) and then send the hashed result through
useradd. The default value disables the account, so you must run passwd to chane the user's password.
  Default Shell:
Set the name of the user's default login shell wiht the -s shell option. By default /bin/bash is the default shell.
  UID:
The -u UID parameter creates an account with the specified user ID value. This value must be a positive integer, and it's normally
greater than 1000 for user accounts. The -o option allows the number to be reused so that two usernames are associated with a single UID.
  System Account Creation:
The -r parameter specifies the creation of a system account-an account with a value less than UID_MIN, as defined in /etc/login.defs.
The useradd command doesn't create a home directory for system account. Example Dameon account
  No User Group:
In some distribution the system creates a group with the same name as the specified username. The -N parameter disables this behavior.



      Password
      
Although useradd provides the -p parameter to set a password, this tool isn't very useful when directly adding a user because it requires
a pre-hashed password. Easiest to create an account in disabled form (by not using -pwith useradd) and set the password after creating
the account. You can do this with the passwd command.
    passwd [option] [username]

                                                    passwd options:
  Update Expired Accounts:
The -k parameter indicates that the system should update an expired account.  
  Lock Accounts:
The -l parameter locks an account by prefixing the hashed password with an exclamation mark (!). The result is that the user can no
longer log into the account but the files are still available.
  Unlock Accounts:
The -u parameter unlocks an account by removing a leading exclamation mark. Be aware that the useradd command creates accounts that are
locked and have no password, unless its -p parameter is specified. Therefore, using this but also results in an account with no password.
passwd doesn't allow this-it returns an error if you attempt it. Adding -f forces passwd to turn the account into one with no password.
  Remove an Account's Password:
The -d parameter removes the password from an account, rendering it password-less. No warning messages are given.  
  Display Account Information:
The -S option displays information about the password for an account. Information displayed includes whether it's set and what type of
algorithm was used to hash the password.
  
Many passwd parameters may be used only by root. Specifically, -l, -u, -f, and -d are all off-limits to ordinary uers. Similarly, only
root may specify a username to passwd.



        usermod
        
The usermod program closely parallels useradd in its features and parameters. This utility changes an existing account instead of 
creating a new one, though. The major differences between useradd and usermod are as follows:
  -usermod allows the addition of an -m parameter when used with -d. The -d parameter alone changes the user's home directory, but
it doesn't move any files. Adding -m causes usermod to move the user's files to the new location.
  -usermod supports an -l parameter, which changes the user's login name to the specified value. For instance, typing
        usermod -l sjones sally                 |               usermod -l [new_username] [current_username]
changes the name from sally to sjones.
  -You may lock and unlock a user's password with the -L and -U options, repectively.
        -L : lock       |       -U : unlock
        
Changing an account's characteristics while the owner is logged in can have undesirable consequences. This is particularly true of
the -d -m combination, which can cause the files on which a user is working to move.

If you change the account's UID, this action does not change the UIDs associated with a user's existing files. Because of this,
the user may lose access to these files.

When using the -G option to add a user to new groups, be aware that any groups not listed will be removed. Therefore, it's a good
idea to use the -a option as well. Using the -a -G parameter options together allows you to add a user to a new group without 
having to list any old groups in the command.

If you only use the usermod -G option without the -a option, you must list all of the user's current groups along with any 
additional new groups. Omitting any of the user's current groups will remove the user from those groups. It's best to use the
-a option to avoid hassle.


  
        chage
        
The chage command allow you to modify account settings relating to account expiration. It's possible to configure Linux accounts so
that they automatically expire if either of two conditions is true:
  1:  The password hasn't been changed in a specified time period.
  2:  The system date is past a predetermined time.
        chage [option] [username]
        
                                        chage option:    
                                        
  Display Information:
The -l option causes chage to display account expiration and password aging information for a particular user.
  Setting Minimum Time between Password changes:
The -m mindays parameter sets the minimum number of days between password changes. 0 indicates that a user can change a password
multiple times in a day, 1 means that a user can change a password once a day, 2 means that a user may change a password once
every two days, and so on. It is best to set this field to at least 5 days. Leaving it at 0 will allow a user to change their
password right back to the original password after a required password change.
  Setting Maximum Time between Password Changes:
The -m maxdays parameter sets the maximum number of days that may pass between password changes.
  Setting the Maximum Inactive Days:
The -I inactivedays parameter sets the number of days between password expiration and account disablement. An expired account may
not be used or may force the user to change the password immediately upon logging in. A disabled account is completely inoperative.
  Setting the Expiration Data:
You can set an absolute expiration date with the -E expiredate option. A value of -1 represents no expiration date.
  Setting the Number of Warning Days:
The -W warndays option sets the number of days before account expiration that the system will send impending expiration warnings
to the user.

The chage command can normally be used only by root.
  
##################################################################
To change user password expiry information use the chage command on Linux as follows:

chage [username]
chage [options] [username]
chage -l voth
chage [username] -d [date]

Options:
  -d, --lastday LAST_DAY        set date of last password change to LAST_DAY
  -E, --expiredate EXPIRE_DATE  set account expiration date to EXPIRE_DATE
  -h, --help                    display this help message and exit
  -I, --inactive INACTIVE       set password inactive after expiration
                                to INACTIVE
  -l, --list                    show account aging information
  -m, --mindays MIN_DAYS        set minimum number of days before password
                                change to MIN_DAYS
  -M, --maxdays MAX_DAYS        set maximim number of days before password
                                change to MAX_DAYS
  -R, --root CHROOT_DIR         directory to chroot into
  -W, --warndays WARN_DAYS      set expiration warning days to WARN_DAYS
##################################################################

Run the pwck utility to verify the files and make sure that they are in sync with each other.


                                /etc/passwd

/etc/passwd : each record begins with a username and continues with a set of fields, delimited by colons (:)
A typical /etc/passwd record entry resembles the following:
        voth:x:1029:503:Thai Vo:/home/usr6/voth:/bin/bash
        [username]:[password]:[UID]:[Primary GID]:[Comment]:[Home Directory]:[Default Shell]
  -Username: User's account name
  -Password: Most Linux system use /etc/shadow password system, where 'x' indicate that shadow password is in use. If the system doesn't use
shadow passwords, a hashed password appears here instead.
  -UID: Account's user ID
  -Primary GID: The default login group ID.
  -Comment: Some systems place additional information here, in a comma-separated list.
  -Home Directory: The user's home directory.
  -Default Shell: Default is /bin/bash you can use other shell like /bin/tcsh
  
Some systems include a shutdown account with /bin/shutdown as the default shell. If you log into this account, the computer immediately
shuts down. You can create user account with a default shell of /bin/false, which prevents users from logging in as ordinary users.



                                /etc/shadow
          voth:$6$5lvfWcSW$BI5L9konFqcIRukmIsJ6X5uYY7pjXXdclx9.:17778:0:180:14:14::
          voth:!!$6$5lvfWcSW$BI5L9konFqcIRukmIsJ6X5uYY7pjXXdclx9.:17778:0:180:14:14::
:::::::: == [USERNAME]:[ENCRYPTION_TYPE][PASSWORD]:[LASTCHANGED]:[MIN]:[MAX]:[WARNING]:[INACTIVE]:[EXPIRE]:

  Username: 
User's username, note that the UID is not used in the /etc/shadow file; the username links entries in this file to /etc/passwd
  Encryption type:
$1$ is MD5
$2a$ is Blowfish
$2y$ is Blowfish
$5$ is SHA-256
$6$ is SHA-512
  Password:
The password is stored in hashed form. 
An asterisk (*) in the password field indicates an account that does not accpet logins.
An exclamation mark (!) in front of the password hash denotes that the account is locked.
Both "!" and "!!" being present in the password field mean an account is locked.
"!!" in an account entry in shadow means the account of an user has been created, but not yet given a password. 
Until being given an initial password by a sysadmin, it is locked by default.
  LASTCHANGED: 
Last password change: Days since Jan 1, 1970 that password was last changed
  MIN: 
The minimum number of days required between password changes i.e. the number of days left before the user is 
allowed to change his/her password.
  MAX: 
The maximum number of days the password is valid (after that user is forced to change his/her password)
  WARNING: 
The number of days before password is to expire that user is warned that his/her password must be changed
  INACTIVE: 
The number of days after password expires that account is disabled
  EXPIRE: 
Days since Jan 1, 1970 that account is disabled i.e. an absolute date specifying when the login may no longer be used.
  Special Flag:
This field is reserved for future use and normally isn't used or contains a meaningless value. This field is empty mainly.

For fields relating to day counts, a value of -1 or 99999 indicates that the relevant feature has been disabled.
  


                          Deleting Accounts
Deleting user accounts is easy. You may use the userdel command to do the job of removing a user's entries from /etc/passwd and,
if the system use shadow password, /etc/shadow as well. The userdel command takes just three parameters:

  Remove User files:
  
  Force Deletion:
  Get Help:
                    
              
              
              
              

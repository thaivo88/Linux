          Configuring PCI Cards
You can tweak how PCI devices are detected in several ways:
  -The linux kernel has several options that affect how it detects PCI devices; the kernel configuration screens under bus options.
  -Most firmware iplementations have PCI options that change the way PCI resources are allocated.
  -Some linux drivers support options that cause them to configure the relevant hardware to use particular resources. You must then pass
these options to the kernel using a boot loader.
  -You can use the 'setpci' utility to query ad adjust PCI devices' configurations directly.

You can check your PCI devices by using 'lspci' command; it displays all of the information about the PCI busses on your system and all
of the devices connected to those busses.

            lspci
Option    Effect
-v        Increases verbosity of output. May be doubled (-vv) or tripled (-vvv) to produce more output
-n        Displays information innumeric codes rather than translating the codes to manufacturer and device names.
-nn       Displays both the manufacturer and device names and their associated numeric codes.
-x        Displays the PCI configuration space for each device as a hexadecimal dump. May be triple (-xxx) or quadrupling (-xxxx)
-b        Shows IRQ numbers and other data as seen by devices rather than as seen by the kernel
-t        Displays a tree view depicting the relationship between devices.
-s [domain:bus:slot.function]  Displays only devices that match the listed specification. This can be used to trim the results of the output
-d [vendor:device]  Shows data on the specified devices
-i [file]  Uses the specified file to map vendor and device IDs to names. (default /usr/share/misc/pci.ids)
-m        Dumps data in a machine-readable form intended for use by scripts. -m backward-compatible format; -mm newer format
-D        Displays PCI domain numbers. These numbers normally aren't displayed.
-M        Scan in bus-mapping mode, which can reveal devices hidden behind a misconfigured PCI bridge.
--version Displays version information









WHAT IS LINUX KERNEL?
The kernel is just a piece of code. A kernel is a central part of computer operating system which acts as a mediator between system 
hardware and applications installed in the system. The Kernel converts program’s instructions to machine understandable language and 
passes them through device drivers.

WHAT ARE TYPES OF KERNEL?
We have two types of Kernels are there.
    Monolithic kernel
    Modular kernel


WHAT IS A KERNEL MODULE?
A kernel module is a part of the kernel which can do some work. Say for example Linux Kernel will not support all types of hardware, 
So programmers will write some kernel modules and distribute them along with their software. Whenever you want to make this 
hardware to work, we have to load this piece of software into the kernel so that your system understands it. 
This software is nothing but Kernel module. The modules also referred to as device drivers are specialized pieces of software 
which power or control access to a peripheral. They are loaded into or unloaded from the running kernel without the need of a reboot.

WHAT IS A MONOLITHIC KERNEL?
A monolithic kernel is where the entire operating system works in kernel space. There is no such space called User space 
where you can load/remove kernel modules from userspace. In other words, entire device drivers, Filesystem, and 
IPC will work in kernel space.

WHAT IS A MODULAR KERNEL?
A modular kernel is where only a particular part of OS is loaded into kernel space. In this way, we will reduce the burden on the system 
as we can load kernel modules into kernel where and whenever it is required. And the services will run complete isolation from 
Kernel space.

The /proc/devices file contains a mapping of the device major numbers and device types broadly classified as character and block devices.
The kernel gains access to these devices through the corresponding module provided that it has been loaded correctly. 
Given below is a snippet of the content contained in this file.

    [root@linuxnix ~]# head /proc/devices
    Character devices:
      1 mem
      4 /dev/vc/0
      4 tty
      4 ttyS
      5 /dev/tty
      5 /dev/console
      5 /dev/ptmx
      7 vcs
      10 misc
      
The number on the left is the primary number of the module which is used internally by the kernel to identify the peripheral type and 
the names to the right of the number represent the device type.

The /proc/modules file contains a list of currently loaded modules. Here’s a snippet from the file:

    [root@linuxnix ~]# head /proc/modules
      ebtable_filter 12827 0 - Live 0xffffffffa0657000
      ebtables 35009 1 ebtable_filter, Live 0xffffffffa0649000
      ip6table_filter 12815 0 - Live 0xffffffffa048a000
      ip6_tables 26901 1 ip6table_filter, Live 0xffffffffa0641000
      iptable_filter 12810 0 - Live 0xffffffffa048f000
      vmw_vsock_vmci_transport 30577 0 - Live 0xffffffffa0481000
      vsock 34855 3 vmw_vsock_vmci_transport, Live 0xffffffffa0463000
      snd_seq_midi 13565 0 - Live 0xffffffffa05f0000
      snd_seq_midi_event 14899 1 snd_seq_midi, Live 0xffffffffa063c000
      intel_powerclamp 14419 0 - Live 0xffffffffa0631000
      
The name in the leftmost/first column in the file represents the module name.
We could go to /sys/module/<module_name> directory to view the files that hold the settings for the driver.

Example 1: To view the corresponding files for the SCSI disk driver represented by sd_mod module, 
I could head to the /sys/module/sd_mod directory.

    [root@linuxnix ~]# cd /sys/module/sd_mod
    [root@linuxnix sd_mod]# ls
      coresize  holders  initsize  initstate  notes  refcnt  rhelversion  sections  srcversion  taint  uevent
      
HOW TO SEE MODULE LOADED INTO THE KERNEL?
Example 2: If we open the initstate and rhelversion files they show that the module is loaded indicated by “live” and 
the OS for which it’s been loaded is 7.3

    [root@linuxnix sd_mod]# cat initstate
      live
    [root@linuxnix sd_mod]#
    [root@linuxnix sd_mod]# cat rhelversion
      7.3
To manage kernel modules, we use the lsmod and modprobe commands.
We can add specific options to the modules to customize external access. These options can be configured in the /etc/modprobe.d directory.
    
    lsmod
    lsmod | grep [keyword]
    rmmod [mod name]


############ kernel module dissappearing after reboot ###############
    lsmod | grep [module_name]
# if you don't see the module you install after a reboot run modinfo
    modinfo [module_name]
        # example:
             $modinfo nv_peer_mem 
                filename:       /lib/modules/4.15.0-46-generic/updates/dkms/nv_peer_mem.ko
                version:        1.0-8
                license:        Dual BSD/GPL
                description:    NVIDIA GPU memory plug-in
                author:         Yishai Hadas
                srcversion:     9F372F055FA43FA7440C57D
                depends:        ib_core
                retpoline:      Y
                name:           nv_peer_mem
                vermagic:       4.15.0-46-generic SMP mod_unload 
                signat:         PKCS#7
                signer:         
                sig_key:        
                sig_hashalgo:   md4
# if modinfo see the module then run insert module command
    insmod [filename]
        # example:
            insmod /lib/modules/4.15.0-46-generic/updates/dkms/nv_peer_mem.ko
# use lsmod to check if the module is loaded
    lsmod | grep [module_name]
######################################################




             Kernel Modules
Kernel driver which many come in the form of kernel modules. These are stand-alone driver files, typically stored in the /lib/modules directory.
To list the currently loaded modules use 'lsmod'
To learn more about a module use 'modinfo'

You can load kernel modules with two commands:
-insmod
-modprobe

'lsmod' shows how much memory each module consumes

'insmod' program insert a single module into the kernel. (require already loaded modules to which the initial module relies on)
If you attempt to load a module that depends on others and those other module aren't loaded, insmod will fail.
'modprobe'automatically loads any depended on modules.
          
                    modprobe
          Be Verbose: -v or --verbose 
Display extra information about its operations, typically a summary.
          Change Configuration files: modprobe -C [directory]
'modprobe' program uses a configuration file called /etc/modprobe.conf (multiple files in /etc/modprobe.d); you can change the configuration
file or directory by passing a new file with the -C [filename option].
          Perform a Dry Run: -n or --dry-run
Causes modprobe to perform checks and all other operations except the actual module insertions. (helpful for debugging)
          Remove Modules: -r or --remove
remove the specified module and any on which it depends. (depended on modules are not removed if they're in use)
          Force loading: -f or --force
Force the module loading even if the kernel version doesn't match what the module expects. (dangerous option)
          Show Dependencies: --show-depends
shows all of the modules on which the specified module depends
          Show Available module: -l or --list
displays a list of available options whose names match the wildcard you specify.
modprobe -l v* (list all module start with 'v')

                    Removing Kernel Modules: rmmod
          Be Verbose: -v or --verbose
display some extra information about what it's doing, may be helpful for debugging
          Force Removal: -f or --force
forces mmodule removal even if the module is marked as being in use.
          Wait until unused: -w or --wait
Wait for the module to become unused rather than return an error message if the module is in use.
If you try to unload a module that's depended on by other modules or is in use, rmmod will return an error message.
If you want to unload an entire module stack-that is, a module and all those upon which it depends-you can use the modprobe command
and its -r option.

          
          



                    USB Driver: lsusb
          Be verbose: -v
Produces extended information about each product.
          Restrict bus and device number: -s [bus:devnum]
restricts output to the specified bus and device number
          restict vendor and product: -d [vendor:product]
Limit output to a particular vendor and product; vendor and product are the codes just after ID on each line of the basic lsusb output
          display device by filename: -D [filename]
displays information about the device that's accessible via [filename], which should be a file in the /proc/bus/usb directory.
          tree view: -t
displays the device list as a tree so that you can see what devices are connected to specific controllers more easily.
          version: -V or --version
displays the version of the lsusb utility     

                    USB Manager Application
Two tools in particular are used for managing USB devices:
          usbmgr
          hotplug
          
'usbmgr' runs in the background to detect changes on the USB bus; detects changes, it loads or unloads the kernel modules that are 
required to handle the devices. 'usbmgr' uses configuration files in /etc/usbmgr to handle specific devices and use /etc/usbmgr/usbmgr.conf
to control the overall configuration.

'hotplug' which relies on kernel support. This system uses files stored in /etc/hotplug to control the configuration of specific USB device.
/etc/hotplug/usb.usermap contains a database of USB device IDs and pointers to scripts in /etc/hotplug/usb that are run when devices are 
plugged in or unplugged.
          
                    
                    

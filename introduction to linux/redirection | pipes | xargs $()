Standard Bash Files Descriptors:
  -Stdin: standard input represended by a 0
  -Stdout: standard output represented by a 1
  -Stderr: standard error represented by a 2
  __________________________________________________
  |                            >> output (stdout 1)  |
  |input (stdin 0) >> command =                      |
  |                            >> error (stderr 2)   |
  |__________________________________________________|
  
  Stdout and Stderr send to the same output device but sometime you may want to redirect Stderr into a text file to log all error message.
  
Redirecting Input and Output
  Using > you can redirect the output into a file instead on the screen.
  
Redirection operator 
    >     Creates a new file containing standard output. If file exists it will be overwritten.
    >>    Add standard output to the exisiting file. If file doesn't exists it will create one.
    2>    Creates a new file containing standard error. If file exists it will be overwritten.
    2>>   Add standard error to the exisiting file. If file doesn't exists it will create one.
    &>    Creates a new file containing both standard output and standard error. If file exists it will be overwritten.
    <     Sends the contents of the specified file to be used as standard input.
    <<    Add text on the following lines as standard input.
              Called the "home document" commonly used in a script to pass data to an interactive program.
    <>    Causes the specified file to be used for both standard input and standard output.
    
    
Example:  (you can use the descriptors or without)
    Without Descriptor              With Descriptor
    $ echo pwd > path.txt           $ echo pwd 1> path.txt
    $ cat path.txt                  $ cat path.txt
    /home/thai/Documents            /home/thai/Documents
    
################################

Generating Command Lines

  xargs command builds a command from its standard input
  xargs [options] [command [initial-arguments]]

When you run the xargs command, it runs command once for every word passed to it on standard input, 
adding that word to the argument list for command.

  find / -user Christine | xargs -d "\n" rm
first part (find / -user Christine) finds all files in the (/) directory belonging to Christine.
This list is then piped to xargs, which adds each input value to its own rm command.
The -d "\n" option tells xargs to use onlhy newlines as delimiters.

Backtick:` *character to the left of the 1 key
Text within backticks is treated as a separate command whose results are substituted on the command line.
  rm `find ./ -user Christine`
rm each instance of the find command that finds a file belonging to Christine.

Backtick:` = $()
  rm `find ./ -user Christine == rm $(find ./ -user Christine)
backtick is falling out of favor because it is often confused with single quotation mark.


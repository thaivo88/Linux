  #On the gate server/CMU copy over group, hosts, fstab files
scp /etc/group /etc/hosts /etc/fstab \[username]@[nodename]:/tmp

  #On computing node rename orignal file to [file].old
mv /etc/group /etc/group.old
mv /etc/hosts /etc/hosts.old
mv /etc/fstab /etc/fstab.old

  #Add users to suoders
vi /etc/sudoers
  #change root password if setup did not allow for root password
passwd root
  #enter password

  #Moving over HDD's UUID into fstab (NFS mount point)
cat /etc/fstab.old >> /tmp/fstab    #the tmp fstab was copied over using scp command
mv /tmp/fstab /etc/fstab            
vi /etc/fstab                       #delete old UUID

mv /tmp/group /etc/group
mv /tmp/hosts /etc/hosts

#################### NFS MOUNTS #######################
hpcgate:/apps /apps nfs rsize=131072,wsize=131072,intr,bg,vers=3 0 0
hpcgate:/home /home nfs rsize=131072,wsize=131072,intr,bg,vers=3 0 0
hpcgate:/mops /mops nfs rsize=131072,wsize=131072,intr,bg,vers=3 0 0
hpcgate:/ml /ml nfs rsize=131072,wsize=131072,intr,bg,vers=3 0 0

hpchost3-a:/admin /admin nfs rw,tcp,hard,timeo=20,retrans=7,intr,bg,rsize=32768,wsize=32768,nfsvers=3,mountvers=3 0 0
hpchost3-a:/hpcsw /hpcsw nfs rw,tcp,hard,timeo=20,retrans=7,intr,bg,rsize=32768,wsize=32768,nfsvers=3,mountvers=3 0 0
hpchost3-a:/sw /sw nfs rw,tcp,hard,timeo=20,retrans=7,intr,bg,rsize=32768,wsize=32768,nfsvers=3,mountvers=3 0 0
hpchost4-a:/usr1 /usr1 nfs rw,tcp,hard,timeo=20,retrans=7,intr,bg,rsize=32768,wsize=32768,nfsvers=3,mountvers=3 0 0
hpchost4-a:/usr2 /usr2 nfs rw,tcp,hard,timeo=20,retrans=7,intr,bg,rsize=32768,wsize=32768,nfsvers=3,mountvers=3 0 0
hpchost4-a:/usr3 /usr3 nfs rw,tcp,hard,timeo=20,retrans=7,intr,bg,rsize=32768,wsize=32768,nfsvers=3,mountvers=3 0 0
hpchost4-a:/usr4 /usr4 nfs rw,tcp,hard,timeo=20,retrans=7,intr,bg,rsize=32768,wsize=32768,nfsvers=3,mountvers=3 0 0
hpchost3-a:/usr5 /usr5 nfs rw,tcp,hard,timeo=20,retrans=7,intr,bg,rsize=32768,wsize=32768,nfsvers=3,mountvers=3 0 0
hpchost3-a:/usr6 /usr6 nfs rw,tcp,hard,timeo=20,retrans=7,intr,bg,rsize=32768,wsize=32768,nfsvers=3,mountvers=3 0 0
#-future-#hpchost4-a:/usr7 /usr7 nfs rw,tcp,hard,timeo=20,retrans=7,intr,bg,rsize=32768,wsize=32768,nfsvers=3,mountvers=3 0 0
#-future-#hpchost4-a:/usr8 /usr8 nfs rw,tcp,hard,timeo=20,retrans=7,intr,bg,rsize=32768,wsize=32768,nfsvers=3,mountvers=3 0 0
#-future-#hpchost3-a:/usr9 /usr9 nfs rw,tcp,hard,timeo=20,retrans=7,intr,bg,rsize=32768,wsize=32768,nfsvers=3,mountvers=3 0 0
#######################################################


  #Install package
apt-get install nis           #NIS daemon
yum install nis
  #plab NIS domain: partner       server: 10.100.0.5
  #host NIS domain: benchmark     server: 10.0.0.10
vi /etc/defaultdomain     #NIS domain
domainname partner        #command to set domainname to partner
vi /etc/yp.conf           #NIS server ip
ypserver 10.100.0.5       #input this file into yp.conf
  #search and install ypblind and yp-tool 
ypbind-1.37.1-9.el7.aarch64.rpm
yp-tools-2.14-5.el7.aarch64.rpm 
systemctl enable ypbind
service ypbind restart

#to makesure ypbind is working
ypwhich 

apt-get install nfs-common    #system file to mount fstab
yum install nsf-common


  #if you run into an error when installing a package
  #delete the info in statoverride file
############# error ###############
#dpkg: unrecoverable fatal error, aborting:
#syntax error: unknown user 'user' in statoverride file
##################################
vi /var/lib/dpkg/statoverride

  #create mount point for fstab
mkdir /apps /home /scratch /mops /ml
mount -a

  #editing file so new users can ssh into the system
echo "+::::::/bin/false" >> /etc/passwd   # for rhel
echo "+:::::: >> /etc/passwd              # for ubuntu
echo "+::::::::" >> /etc/shadow
echo "+:::" >> /etc/group

  #add DNS IP
vi /etc/resolv.conf
  #add these domain ip address below
nameserver 16.xx.xx.xx
nameserver 15.xx.xx.xx
nameserver 15.xx.xx.xx

  #edit nsswitch file to config NIS
vi /etc/nsswitch.conf 
######################################
passwd:     compat files nis
shadow:     compat files nis
group:      files nis
hosts:      files dns nis
bootparams: nisplus [NOTFOUND=return] files
ethers:     files
netmasks:   files
networks:   files
protocols:  files nis
rpc:        files
services:   files
netgroup:   files nis
publickey:  nisplus
automount:  files nis
aliases:    files nis
#####################################







######################################## Ubuntu Environment Config ##############################################################

#tar file with packages in voth dir name u18setup.tar.gz
  cd /home/hpcd/voth
  scp u18setup.tar.gz \[username@hostname:/tmp 
#disable nouveau kernal driver to install nvidia driver
#create file: 
  vi /etc/modprobe.d/blacklist-nouveau.conf
#with the following contents:
  blacklist nouveau
  options nouveau modeset=0

#Regenerate the kernel initramfs:
  update-initramfs -u

#Install GNU Compiler Collection for Nvidia driver
  apt-get install gcc
  reboot

#move MLNX file to /root
#move nv peer file to /root
#tar both file
#install mlnx then nv

#skipping the firmware update due to nvidia symbol error
  ./mlnxofedinstall --without-fw-update --without-mlnx-fw-updater 

#finding the bus id for HCA
  lspci | grep Mellanox
#query the HCA card
  mstflint -d [pci_bus_id] q
  		#example: mstflint -d 37:00.0 q
#upgrade firmware of the HCA card
  mstflint -d [pci_bus_id] -i [file] burn
  		#example: mstflint -d 37:00.0 -i /tmp/fw-ConnectX5-rel-16_23_1020-872725-B21_Ax-UEFI-14.16.17-FlexBoot-3.5.504.signed.bin burn
  /etc/init.d/openibd restart
#or
  reboot

#tar nv_peer_mem
  tar cvfz nvidia-peer-memory_1.0.orig.tar.gz nv_peer_memory-master --owner=1000 --group=1000
  cd nv_peer_mem
  dpkg-buildpackage -us -uc
  cd ..
  dpkg -i nvidia-peer-memory-dkms_1.0-8_all.deb

#install singularity
#singularity needs go language to install
  apt-get install golang
  git clone https://github.com/singularityware/singularity.git
  echo 'export GOPATH=${HOME}/go' >> ~/.bashrc &&  echo 'export PATH=/usr/local/go/bin:${PATH}:${GOPATH}/bin' >> ~/.bashrc &&   source ~/.bashrc
  mkdir -p ${GOPATH}/src/github.com/sylabs &&  cd ${GOPATH}/src/github.com/sylabs &&  git clone https://github.com/sylabs/singularity.git &&   cd singularity
  apt install libssl-dev uuid-dev
  cd ${GOPATH}/src/github.com/sylabs/singularity &&  ./mconfig &&  cd ./builddir &&   make &&   make install

#installing docker 
  apt-get install apt-transport-https  ca-certificates  curl  gnupg-agent   software-properties-common
  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
  apt-key fingerprint 0EBFCD88
  add-apt-repository    "deb [arch=amd64] https://download.docker.com/linux/ubuntu  $(lsb_release -cs)  stable nightly test"
  apt-get install docker-ce docker-ce-cli containerd.io
  docker run hello-world

#Nvidia-Docker
	curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey |   sudo apt-key add -
	distribution=$(. /etc/os-release;echo $ID$VERSION_ID)
	curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list |  sudo tee /etc/apt/sources.list.d/nvidia-docker.list
	sudo apt-get update


#enable root login
  sudo sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config 
  systemctl restart sshd

############################################ End of Config ###############################################################







Output for /etc/shadow:
voth:$6$5lvfWcSW$BI5MdAkln0L9k38rMkM22yP8SqFqcIRukmIsJ6X5uYY7pjXXdclx9.:17778:0:180:14:14::
Above is an example not really my encryption

:::::::: == [USERNAME]:[ENCRYPTION_TYPE][PASSWORD]:[LASTCHANGED]:[MIN]:[MAX]:[WARNING]:[INACTIVE]:[EXPIRE]:
Encryption type:
  $1$ is MD5
  $2a$ is Blowfish
  $2y$ is Blowfish
  $5$ is SHA-256
  $6$ is SHA-512
LASTCHANGED - Last password change: Days since Jan 1, 1970 that password was last changed
MIN: The minimum number of days required between password changes i.e. the number of days left before the user is allowed to change his/her password
MAX: The maximum number of days the password is valid (after that user is forced to change his/her password)
WARNING: The number of days before password is to expire that user is warned that his/her password must be changed
INACTIVE: The number of days after password expires that account is disabled
EXPIRE: days since Jan 1, 1970 that account is disabled i.e. an absolute date specifying when the login may no longer be used.

#############################################

To change user password expiry information use the chage command on Linux as follows:

chage [username]
chage [options] [username]
chage -l voth
chage [username] -d [date]

Options:
  -d, --lastday LAST_DAY        set date of last password change to LAST_DAY
  -E, --expiredate EXPIRE_DATE  set account expiration date to EXPIRE_DATE
  -h, --help                    display this help message and exit
  -I, --inactive INACTIVE       set password inactive after expiration
                                to INACTIVE
  -l, --list                    show account aging information
  -m, --mindays MIN_DAYS        set minimum number of days before password
                                change to MIN_DAYS
  -M, --maxdays MAX_DAYS        set maximim number of days before password
                                change to MAX_DAYS
  -R, --root CHROOT_DIR         directory to chroot into
  -W, --warndays WARN_DAYS      set expiration warning days to WARN_DAYS
  
############################################

Verify integrity of password files
Use the pwck command verifies the integrity of the users and authentication information. 
It checks that all entries in /etc/passwd and /etc/shadow have the proper format and contain valid data. 
The user is prompted to delete entries that are improperly formatted or which have other uncorrectable errors. 
The syntax is:

pwck -r /etc/passwd
pwck -r /etc/shadow
pwck [options] /etc/shadow

Options:
  -h, --help                    display this help message and exit
  -q, --quiet                   report errors only
  -r, --read-only               display errors and warnings
                                but do not change files
  -R, --root CHROOT_DIR         directory to chroot into
  -s, --sort                    sort entries by UID

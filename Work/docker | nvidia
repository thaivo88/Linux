#script in ~sfleisch
yum install -y http://mirror.centos.org/centos/7/extras/x86_64/Packages/container-selinux-2.68-1.el7.noarch.rpm 
yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
yum install -y docker-ce-18.09.0-3.el7.x86_64 
#You need to install the repo def into /etc/yum.repo.d.
########################################
#controlling docker daemon
 systemctl start|restart|status docker.service (docker daemon)
#information for nvidia docker
 which nvidia-docker
 nvidia-docker  --version
 docker info
 nvidia-docker verison (more detail)
#list of repository
 docker images 
#install docker
 sudo yum -y install docker-engine
#install nvidia docker
 yum list installed nvidia-docker
#install nvidia container 
 yum list installed nvidia-container-runtime

 docker load -i tf18.08.tar
 docker tag [image id] [repositoy name]:[tag]

# stop docker container
 docker stop [container-name]
# list process of docker
 docker ps


#If docker daemon does not start and in a failed state check metadata file at : /var/lib/docker/devicemapper/devicemapper/metadata
#If the file has symbols delete docker directory : /var/lib/docker
 rm -rf /var/lib/docker
 systemctl restart docker.service
 
#if deleting the docker dir did not start docker
cd /etc/docker/
vi daemon.json
#delete the file and input only: {}
 
 #if docker was started too often force to start:
 systemctl reset-failed docker.service
 systemctl start docker.service
 
#script location
/admin/nodes/scripts/admindocker start 

#other commands
 systemctl stop docker.service

docker pull nvcr.io/nvidia/tensorflow-18.09-py3
docker images
nvidia-docker run -ti --rm nvcr.io/nvidia/tensorflow-18.09-py3 /bin/bash
#ti terminal interactive rm remove the container instaint
exit

############## rhel 8 ##############
# Install Docker
#
dnf install https://download.docker.com/linux/centos/7/x86_64/stable/Packages/containerd.io-1.2.6-3.3.el7.x86_64.rpm
dnf install docker-ce
dnf config-manager --add-repo=https://download.docker.com/linux/centos/docker-ce.repo
dnf repolist -v
dnf list docker-ce --showduplicates | sort -r
dnf install docker-ce-3:19.03.13-3.el8 

# Install Nvidia-Docker
#
dnf install -y tar bzip2 make automake gcc gcc-c++ vim pciutils elfutils-libelf-devel libglvnd-devel iptables
distribution=$(. /etc/os-release;echo $ID$VERSION_ID)
curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.repo | sudo tee /etc/yum.repos.d/nvidia-docker.repo
dnf clean expire-cache --refresh
dnf install -y nvidia-docker2
####################################


############# ubuntu 18 ############
# Install Docker
#
yes | apt-get install apt-transport-https  ca-certificates  curl  gnupg-agent   software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
apt-key fingerprint 0EBFCD88
add-apt-repository    "deb [arch=amd64] https://download.docker.com/linux/ubuntu  $(lsb_release -cs)  stable nightly test"
yes | apt-get install docker-ce docker-ce-cli containerd.io

# Install Nvidia-Docker
#
curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey |   sudo apt-key add -
distribution=$(. /etc/os-release;echo $ID$VERSION_ID)
curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list |  sudo tee /etc/apt/sources.list.d/nvidia-docker.list
yes | apt-get update
yes | apt-get install nvidia-docker2
###################################

# nvidia fabric manager
#
# bzip2 make automake gcc gcc-c++ pciutils elfutils-libelf-devel libglvnd-devel
#Enable the PowerTools repo and set up the external dependency on EPEL for DKMS.
 sudo dnf config-manager --set-enabled PowerTools
 sudo dnf install -y epel-release
# Install the CUDA repository public GPG key.
 distribution=rhel8
# Setup the CUDA network repository.
 ARCH=$( /bin/arch )
 sudo dnf config-manager --add-repo http://developer.download.nvidia.com/compute/cuda/repos/$distribution/${ARCH}/cuda-$distribution.repo
# The NVIDIA driver requires that the kernel headers and development packages for the running version of the kernel be installed at the time of the driver installation, as well whenever the driver is rebuilt. For example, if your system is running kernel version 4.4.0, the 4.4.0 kernel headers and development packages must also be installed.
# For CentOS 8, ensure that the system has the correct Linux kernel sources from the CentOS repositories:
 sudo dnf install -y kernel-devel-$(uname -r) kernel-headers-$(uname -r)
# Note that in some cases, you may have to update the running kernel as a pre-requisite:
  sudo dnf install -y kernel kernel-core kernel-modules
# The choice of the driver package depends on the stream and profile to be used as shown below:
 sudo dnf module install nvidia-driver
 dnf install nvidia-fabric[]
 dnf install nvidia-fabric-devel[]
